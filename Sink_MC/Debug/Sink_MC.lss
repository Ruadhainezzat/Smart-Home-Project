
Sink_MC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001300  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001b  00800060  00800060  00001374  2**0
                  ALLOC
  2 .stab         00001e78  00000000  00000000  00001374  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bf3  00000000  00000000  000031ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 57 06 	jmp	0xcae	; 0xcae <__vector_1>
       8:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__vector_2>
       c:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <__vector_3>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__vector_9>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ab 37       	cpi	r26, 0x7B	; 123
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 33 09 	call	0x1266	; 0x1266 <main>
      74:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Actuator_Init>:


static Actuator_ChannelConfig * ActuatorsChannels = NULL_PTR;


void Actuator_Init(Actuator_ConfigType * Actuator_ConfigTypePtr){
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	00 d0       	rcall	.+0      	; 0x82 <Actuator_Init+0x6>
      82:	0f 92       	push	r0
      84:	cd b7       	in	r28, 0x3d	; 61
      86:	de b7       	in	r29, 0x3e	; 62
      88:	9b 83       	std	Y+3, r25	; 0x03
      8a:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Loop Counter
	 */
	u8 counter = 0;
      8c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Point to the actuators array
	 */
	ActuatorsChannels = Actuator_ConfigTypePtr->Actuators;
      8e:	8a 81       	ldd	r24, Y+2	; 0x02
      90:	9b 81       	ldd	r25, Y+3	; 0x03
      92:	90 93 61 00 	sts	0x0061, r25
      96:	80 93 60 00 	sts	0x0060, r24
	for (counter=0; counter < NUM_ACTUATORS_CONFIG; counter++){
      9a:	19 82       	std	Y+1, r1	; 0x01
      9c:	1a c0       	rjmp	.+52     	; 0xd2 <Actuator_Init+0x56>

		/* Set Actuator Channel to output */
		DIO_u8SetPinDirection(ActuatorsChannels->actuatorPort, ActuatorsChannels->actuatorChannel,DIO_u8_PIN_OUTPUT);
      9e:	e0 91 60 00 	lds	r30, 0x0060
      a2:	f0 91 61 00 	lds	r31, 0x0061
      a6:	80 81       	ld	r24, Z
      a8:	e0 91 60 00 	lds	r30, 0x0060
      ac:	f0 91 61 00 	lds	r31, 0x0061
      b0:	91 81       	ldd	r25, Z+1	; 0x01
      b2:	69 2f       	mov	r22, r25
      b4:	41 e0       	ldi	r20, 0x01	; 1
      b6:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_u8SetPinDirection>
		ActuatorsChannels++;
      ba:	80 91 60 00 	lds	r24, 0x0060
      be:	90 91 61 00 	lds	r25, 0x0061
      c2:	02 96       	adiw	r24, 0x02	; 2
      c4:	90 93 61 00 	sts	0x0061, r25
      c8:	80 93 60 00 	sts	0x0060, r24
	u8 counter = 0;
	/*
	 * Point to the actuators array
	 */
	ActuatorsChannels = Actuator_ConfigTypePtr->Actuators;
	for (counter=0; counter < NUM_ACTUATORS_CONFIG; counter++){
      cc:	89 81       	ldd	r24, Y+1	; 0x01
      ce:	8f 5f       	subi	r24, 0xFF	; 255
      d0:	89 83       	std	Y+1, r24	; 0x01
      d2:	89 81       	ldd	r24, Y+1	; 0x01
      d4:	82 30       	cpi	r24, 0x02	; 2
      d6:	18 f3       	brcs	.-58     	; 0x9e <Actuator_Init+0x22>

		/* Set Actuator Channel to output */
		DIO_u8SetPinDirection(ActuatorsChannels->actuatorPort, ActuatorsChannels->actuatorChannel,DIO_u8_PIN_OUTPUT);
		ActuatorsChannels++;
	}
	ActuatorsChannels = Actuator_ConfigTypePtr->Actuators;
      d8:	8a 81       	ldd	r24, Y+2	; 0x02
      da:	9b 81       	ldd	r25, Y+3	; 0x03
      dc:	90 93 61 00 	sts	0x0061, r25
      e0:	80 93 60 00 	sts	0x0060, r24
}
      e4:	0f 90       	pop	r0
      e6:	0f 90       	pop	r0
      e8:	0f 90       	pop	r0
      ea:	cf 91       	pop	r28
      ec:	df 91       	pop	r29
      ee:	08 95       	ret

000000f0 <Actuator_SetState>:

void Actuator_SetState(u8 Actuator_Number, Actuator_State State){
      f0:	df 93       	push	r29
      f2:	cf 93       	push	r28
      f4:	00 d0       	rcall	.+0      	; 0xf6 <Actuator_SetState+0x6>
      f6:	cd b7       	in	r28, 0x3d	; 61
      f8:	de b7       	in	r29, 0x3e	; 62
      fa:	89 83       	std	Y+1, r24	; 0x01
      fc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Set Actuator Channel Value
	 */
	DIO_u8SetPinValue(ActuatorsChannels[Actuator_Number].actuatorPort, ActuatorsChannels[Actuator_Number].actuatorChannel, State);
      fe:	20 91 60 00 	lds	r18, 0x0060
     102:	30 91 61 00 	lds	r19, 0x0061
     106:	89 81       	ldd	r24, Y+1	; 0x01
     108:	88 2f       	mov	r24, r24
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	88 0f       	add	r24, r24
     10e:	99 1f       	adc	r25, r25
     110:	f9 01       	movw	r30, r18
     112:	e8 0f       	add	r30, r24
     114:	f9 1f       	adc	r31, r25
     116:	40 81       	ld	r20, Z
     118:	20 91 60 00 	lds	r18, 0x0060
     11c:	30 91 61 00 	lds	r19, 0x0061
     120:	89 81       	ldd	r24, Y+1	; 0x01
     122:	88 2f       	mov	r24, r24
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	88 0f       	add	r24, r24
     128:	99 1f       	adc	r25, r25
     12a:	f9 01       	movw	r30, r18
     12c:	e8 0f       	add	r30, r24
     12e:	f9 1f       	adc	r31, r25
     130:	91 81       	ldd	r25, Z+1	; 0x01
     132:	84 2f       	mov	r24, r20
     134:	69 2f       	mov	r22, r25
     136:	4a 81       	ldd	r20, Y+2	; 0x02
     138:	0e 94 1e 02 	call	0x43c	; 0x43c <DIO_u8SetPinValue>
}
     13c:	0f 90       	pop	r0
     13e:	0f 90       	pop	r0
     140:	cf 91       	pop	r28
     142:	df 91       	pop	r29
     144:	08 95       	ret

00000146 <Comm_Init>:

#include "CommunicationLinker.h"
#include "SPI_interface.h"


void Comm_Init(CommLinker_ControllerModes ControllerMode){
     146:	df 93       	push	r29
     148:	cf 93       	push	r28
     14a:	0f 92       	push	r0
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
     150:	89 83       	std	Y+1, r24	; 0x01

	if(ControllerMode == COMM_MASTER_MODE){
     152:	89 81       	ldd	r24, Y+1	; 0x01
     154:	81 30       	cpi	r24, 0x01	; 1
     156:	21 f4       	brne	.+8      	; 0x160 <Comm_Init+0x1a>
		SPI_voidInitialize(ControllerMode);
     158:	89 81       	ldd	r24, Y+1	; 0x01
     15a:	0e 94 2c 07 	call	0xe58	; 0xe58 <SPI_voidInitialize>
     15e:	06 c0       	rjmp	.+12     	; 0x16c <Comm_Init+0x26>
	}
	else if(ControllerMode == COMM_SLAVE_MODE){
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	82 30       	cpi	r24, 0x02	; 2
     164:	19 f4       	brne	.+6      	; 0x16c <Comm_Init+0x26>
		SPI_voidInitialize(ControllerMode);
     166:	89 81       	ldd	r24, Y+1	; 0x01
     168:	0e 94 2c 07 	call	0xe58	; 0xe58 <SPI_voidInitialize>
	}
	else {
		/* No Action Required */
	}

}
     16c:	0f 90       	pop	r0
     16e:	cf 91       	pop	r28
     170:	df 91       	pop	r29
     172:	08 95       	ret

00000174 <Comm_SendData>:

u8 Comm_SendData(u8 data){
     174:	df 93       	push	r29
     176:	cf 93       	push	r28
     178:	0f 92       	push	r0
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	89 83       	std	Y+1, r24	; 0x01
return SPI_u8Transiver(data);
     180:	89 81       	ldd	r24, Y+1	; 0x01
     182:	0e 94 67 07 	call	0xece	; 0xece <SPI_u8Transiver>
}
     186:	0f 90       	pop	r0
     188:	cf 91       	pop	r28
     18a:	df 91       	pop	r29
     18c:	08 95       	ret

0000018e <DIO_u8SetPinDirection>:
#include "DIO_private.h"
#include "DIO_config.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
     18e:	df 93       	push	r29
     190:	cf 93       	push	r28
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
     196:	28 97       	sbiw	r28, 0x08	; 8
     198:	0f b6       	in	r0, 0x3f	; 63
     19a:	f8 94       	cli
     19c:	de bf       	out	0x3e, r29	; 62
     19e:	0f be       	out	0x3f, r0	; 63
     1a0:	cd bf       	out	0x3d, r28	; 61
     1a2:	8a 83       	std	Y+2, r24	; 0x02
     1a4:	6b 83       	std	Y+3, r22	; 0x03
     1a6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8Pin > DIO_u8_PIN7) || (Copy_u8Direction > DIO_u8_PIN_OUTPUT))
     1ac:	8b 81       	ldd	r24, Y+3	; 0x03
     1ae:	88 30       	cpi	r24, 0x08	; 8
     1b0:	18 f4       	brcc	.+6      	; 0x1b8 <DIO_u8SetPinDirection+0x2a>
     1b2:	8c 81       	ldd	r24, Y+4	; 0x04
     1b4:	82 30       	cpi	r24, 0x02	; 2
     1b6:	10 f0       	brcs	.+4      	; 0x1bc <DIO_u8SetPinDirection+0x2e>
	{
		Local_u8ErrorState=NOK;
     1b8:	19 82       	std	Y+1, r1	; 0x01
     1ba:	ee c0       	rjmp	.+476    	; 0x398 <DIO_u8SetPinDirection+0x20a>
	}
	else
	{
		if(Copy_u8Direction == DIO_u8_PIN_INPUT)
     1bc:	8c 81       	ldd	r24, Y+4	; 0x04
     1be:	88 23       	and	r24, r24
     1c0:	09 f0       	breq	.+2      	; 0x1c4 <DIO_u8SetPinDirection+0x36>
     1c2:	76 c0       	rjmp	.+236    	; 0x2b0 <DIO_u8SetPinDirection+0x122>
		{
			switch(Copy_u8Port)
     1c4:	8a 81       	ldd	r24, Y+2	; 0x02
     1c6:	28 2f       	mov	r18, r24
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	38 87       	std	Y+8, r19	; 0x08
     1cc:	2f 83       	std	Y+7, r18	; 0x07
     1ce:	8f 81       	ldd	r24, Y+7	; 0x07
     1d0:	98 85       	ldd	r25, Y+8	; 0x08
     1d2:	81 30       	cpi	r24, 0x01	; 1
     1d4:	91 05       	cpc	r25, r1
     1d6:	59 f1       	breq	.+86     	; 0x22e <DIO_u8SetPinDirection+0xa0>
     1d8:	2f 81       	ldd	r18, Y+7	; 0x07
     1da:	38 85       	ldd	r19, Y+8	; 0x08
     1dc:	22 30       	cpi	r18, 0x02	; 2
     1de:	31 05       	cpc	r19, r1
     1e0:	2c f4       	brge	.+10     	; 0x1ec <DIO_u8SetPinDirection+0x5e>
     1e2:	8f 81       	ldd	r24, Y+7	; 0x07
     1e4:	98 85       	ldd	r25, Y+8	; 0x08
     1e6:	00 97       	sbiw	r24, 0x00	; 0
     1e8:	69 f0       	breq	.+26     	; 0x204 <DIO_u8SetPinDirection+0x76>
     1ea:	60 c0       	rjmp	.+192    	; 0x2ac <DIO_u8SetPinDirection+0x11e>
     1ec:	2f 81       	ldd	r18, Y+7	; 0x07
     1ee:	38 85       	ldd	r19, Y+8	; 0x08
     1f0:	22 30       	cpi	r18, 0x02	; 2
     1f2:	31 05       	cpc	r19, r1
     1f4:	89 f1       	breq	.+98     	; 0x258 <DIO_u8SetPinDirection+0xca>
     1f6:	8f 81       	ldd	r24, Y+7	; 0x07
     1f8:	98 85       	ldd	r25, Y+8	; 0x08
     1fa:	83 30       	cpi	r24, 0x03	; 3
     1fc:	91 05       	cpc	r25, r1
     1fe:	09 f4       	brne	.+2      	; 0x202 <DIO_u8SetPinDirection+0x74>
     200:	40 c0       	rjmp	.+128    	; 0x282 <DIO_u8SetPinDirection+0xf4>
     202:	54 c0       	rjmp	.+168    	; 0x2ac <DIO_u8SetPinDirection+0x11e>
			{
			case DIO_u8_PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
     204:	aa e3       	ldi	r26, 0x3A	; 58
     206:	b0 e0       	ldi	r27, 0x00	; 0
     208:	ea e3       	ldi	r30, 0x3A	; 58
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	48 2f       	mov	r20, r24
     210:	8b 81       	ldd	r24, Y+3	; 0x03
     212:	28 2f       	mov	r18, r24
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	02 2e       	mov	r0, r18
     21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_u8SetPinDirection+0x94>
     21e:	88 0f       	add	r24, r24
     220:	99 1f       	adc	r25, r25
     222:	0a 94       	dec	r0
     224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_u8SetPinDirection+0x90>
     226:	80 95       	com	r24
     228:	84 23       	and	r24, r20
     22a:	8c 93       	st	X, r24
     22c:	b5 c0       	rjmp	.+362    	; 0x398 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8_PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
     22e:	a7 e3       	ldi	r26, 0x37	; 55
     230:	b0 e0       	ldi	r27, 0x00	; 0
     232:	e7 e3       	ldi	r30, 0x37	; 55
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	48 2f       	mov	r20, r24
     23a:	8b 81       	ldd	r24, Y+3	; 0x03
     23c:	28 2f       	mov	r18, r24
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	02 2e       	mov	r0, r18
     246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_u8SetPinDirection+0xbe>
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	0a 94       	dec	r0
     24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_u8SetPinDirection+0xba>
     250:	80 95       	com	r24
     252:	84 23       	and	r24, r20
     254:	8c 93       	st	X, r24
     256:	a0 c0       	rjmp	.+320    	; 0x398 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8_PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
     258:	a4 e3       	ldi	r26, 0x34	; 52
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	e4 e3       	ldi	r30, 0x34	; 52
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	48 2f       	mov	r20, r24
     264:	8b 81       	ldd	r24, Y+3	; 0x03
     266:	28 2f       	mov	r18, r24
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	02 2e       	mov	r0, r18
     270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_u8SetPinDirection+0xe8>
     272:	88 0f       	add	r24, r24
     274:	99 1f       	adc	r25, r25
     276:	0a 94       	dec	r0
     278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_u8SetPinDirection+0xe4>
     27a:	80 95       	com	r24
     27c:	84 23       	and	r24, r20
     27e:	8c 93       	st	X, r24
     280:	8b c0       	rjmp	.+278    	; 0x398 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8_PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
     282:	a1 e3       	ldi	r26, 0x31	; 49
     284:	b0 e0       	ldi	r27, 0x00	; 0
     286:	e1 e3       	ldi	r30, 0x31	; 49
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	80 81       	ld	r24, Z
     28c:	48 2f       	mov	r20, r24
     28e:	8b 81       	ldd	r24, Y+3	; 0x03
     290:	28 2f       	mov	r18, r24
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	02 2e       	mov	r0, r18
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_u8SetPinDirection+0x112>
     29c:	88 0f       	add	r24, r24
     29e:	99 1f       	adc	r25, r25
     2a0:	0a 94       	dec	r0
     2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_u8SetPinDirection+0x10e>
     2a4:	80 95       	com	r24
     2a6:	84 23       	and	r24, r20
     2a8:	8c 93       	st	X, r24
     2aa:	76 c0       	rjmp	.+236    	; 0x398 <DIO_u8SetPinDirection+0x20a>
			default: Local_u8ErrorState=NOK;             break;
     2ac:	19 82       	std	Y+1, r1	; 0x01
     2ae:	74 c0       	rjmp	.+232    	; 0x398 <DIO_u8SetPinDirection+0x20a>
			}
		}
		else if (Copy_u8Direction == DIO_u8_PIN_OUTPUT)
     2b0:	8c 81       	ldd	r24, Y+4	; 0x04
     2b2:	81 30       	cpi	r24, 0x01	; 1
     2b4:	09 f0       	breq	.+2      	; 0x2b8 <DIO_u8SetPinDirection+0x12a>
     2b6:	70 c0       	rjmp	.+224    	; 0x398 <DIO_u8SetPinDirection+0x20a>
		{
			switch(Copy_u8Port)
     2b8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ba:	28 2f       	mov	r18, r24
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	3e 83       	std	Y+6, r19	; 0x06
     2c0:	2d 83       	std	Y+5, r18	; 0x05
     2c2:	8d 81       	ldd	r24, Y+5	; 0x05
     2c4:	9e 81       	ldd	r25, Y+6	; 0x06
     2c6:	81 30       	cpi	r24, 0x01	; 1
     2c8:	91 05       	cpc	r25, r1
     2ca:	49 f1       	breq	.+82     	; 0x31e <DIO_u8SetPinDirection+0x190>
     2cc:	2d 81       	ldd	r18, Y+5	; 0x05
     2ce:	3e 81       	ldd	r19, Y+6	; 0x06
     2d0:	22 30       	cpi	r18, 0x02	; 2
     2d2:	31 05       	cpc	r19, r1
     2d4:	2c f4       	brge	.+10     	; 0x2e0 <DIO_u8SetPinDirection+0x152>
     2d6:	8d 81       	ldd	r24, Y+5	; 0x05
     2d8:	9e 81       	ldd	r25, Y+6	; 0x06
     2da:	00 97       	sbiw	r24, 0x00	; 0
     2dc:	61 f0       	breq	.+24     	; 0x2f6 <DIO_u8SetPinDirection+0x168>
     2de:	5b c0       	rjmp	.+182    	; 0x396 <DIO_u8SetPinDirection+0x208>
     2e0:	2d 81       	ldd	r18, Y+5	; 0x05
     2e2:	3e 81       	ldd	r19, Y+6	; 0x06
     2e4:	22 30       	cpi	r18, 0x02	; 2
     2e6:	31 05       	cpc	r19, r1
     2e8:	71 f1       	breq	.+92     	; 0x346 <DIO_u8SetPinDirection+0x1b8>
     2ea:	8d 81       	ldd	r24, Y+5	; 0x05
     2ec:	9e 81       	ldd	r25, Y+6	; 0x06
     2ee:	83 30       	cpi	r24, 0x03	; 3
     2f0:	91 05       	cpc	r25, r1
     2f2:	e9 f1       	breq	.+122    	; 0x36e <DIO_u8SetPinDirection+0x1e0>
     2f4:	50 c0       	rjmp	.+160    	; 0x396 <DIO_u8SetPinDirection+0x208>
			{
			case DIO_u8_PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
     2f6:	aa e3       	ldi	r26, 0x3A	; 58
     2f8:	b0 e0       	ldi	r27, 0x00	; 0
     2fa:	ea e3       	ldi	r30, 0x3A	; 58
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	80 81       	ld	r24, Z
     300:	48 2f       	mov	r20, r24
     302:	8b 81       	ldd	r24, Y+3	; 0x03
     304:	28 2f       	mov	r18, r24
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	02 2e       	mov	r0, r18
     30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_u8SetPinDirection+0x186>
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	0a 94       	dec	r0
     316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_u8SetPinDirection+0x182>
     318:	84 2b       	or	r24, r20
     31a:	8c 93       	st	X, r24
     31c:	3d c0       	rjmp	.+122    	; 0x398 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8_PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
     31e:	a7 e3       	ldi	r26, 0x37	; 55
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	e7 e3       	ldi	r30, 0x37	; 55
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	48 2f       	mov	r20, r24
     32a:	8b 81       	ldd	r24, Y+3	; 0x03
     32c:	28 2f       	mov	r18, r24
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	02 2e       	mov	r0, r18
     336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_u8SetPinDirection+0x1ae>
     338:	88 0f       	add	r24, r24
     33a:	99 1f       	adc	r25, r25
     33c:	0a 94       	dec	r0
     33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_u8SetPinDirection+0x1aa>
     340:	84 2b       	or	r24, r20
     342:	8c 93       	st	X, r24
     344:	29 c0       	rjmp	.+82     	; 0x398 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8_PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
     346:	a4 e3       	ldi	r26, 0x34	; 52
     348:	b0 e0       	ldi	r27, 0x00	; 0
     34a:	e4 e3       	ldi	r30, 0x34	; 52
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	80 81       	ld	r24, Z
     350:	48 2f       	mov	r20, r24
     352:	8b 81       	ldd	r24, Y+3	; 0x03
     354:	28 2f       	mov	r18, r24
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	02 2e       	mov	r0, r18
     35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_u8SetPinDirection+0x1d6>
     360:	88 0f       	add	r24, r24
     362:	99 1f       	adc	r25, r25
     364:	0a 94       	dec	r0
     366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_u8SetPinDirection+0x1d2>
     368:	84 2b       	or	r24, r20
     36a:	8c 93       	st	X, r24
     36c:	15 c0       	rjmp	.+42     	; 0x398 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8_PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
     36e:	a1 e3       	ldi	r26, 0x31	; 49
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	e1 e3       	ldi	r30, 0x31	; 49
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	48 2f       	mov	r20, r24
     37a:	8b 81       	ldd	r24, Y+3	; 0x03
     37c:	28 2f       	mov	r18, r24
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	02 2e       	mov	r0, r18
     386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_u8SetPinDirection+0x1fe>
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	0a 94       	dec	r0
     38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_u8SetPinDirection+0x1fa>
     390:	84 2b       	or	r24, r20
     392:	8c 93       	st	X, r24
     394:	01 c0       	rjmp	.+2      	; 0x398 <DIO_u8SetPinDirection+0x20a>
			default: Local_u8ErrorState=NOK;             break;
     396:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	}

	return Local_u8ErrorState;
     398:	89 81       	ldd	r24, Y+1	; 0x01
}
     39a:	28 96       	adiw	r28, 0x08	; 8
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	f8 94       	cli
     3a0:	de bf       	out	0x3e, r29	; 62
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	cd bf       	out	0x3d, r28	; 61
     3a6:	cf 91       	pop	r28
     3a8:	df 91       	pop	r29
     3aa:	08 95       	ret

000003ac <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
     3ac:	df 93       	push	r29
     3ae:	cf 93       	push	r28
     3b0:	00 d0       	rcall	.+0      	; 0x3b2 <DIO_u8SetPortDirection+0x6>
     3b2:	00 d0       	rcall	.+0      	; 0x3b4 <DIO_u8SetPortDirection+0x8>
     3b4:	0f 92       	push	r0
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	8a 83       	std	Y+2, r24	; 0x02
     3bc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8Port)
     3c2:	8a 81       	ldd	r24, Y+2	; 0x02
     3c4:	28 2f       	mov	r18, r24
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	3d 83       	std	Y+5, r19	; 0x05
     3ca:	2c 83       	std	Y+4, r18	; 0x04
     3cc:	8c 81       	ldd	r24, Y+4	; 0x04
     3ce:	9d 81       	ldd	r25, Y+5	; 0x05
     3d0:	81 30       	cpi	r24, 0x01	; 1
     3d2:	91 05       	cpc	r25, r1
     3d4:	d1 f0       	breq	.+52     	; 0x40a <DIO_u8SetPortDirection+0x5e>
     3d6:	2c 81       	ldd	r18, Y+4	; 0x04
     3d8:	3d 81       	ldd	r19, Y+5	; 0x05
     3da:	22 30       	cpi	r18, 0x02	; 2
     3dc:	31 05       	cpc	r19, r1
     3de:	2c f4       	brge	.+10     	; 0x3ea <DIO_u8SetPortDirection+0x3e>
     3e0:	8c 81       	ldd	r24, Y+4	; 0x04
     3e2:	9d 81       	ldd	r25, Y+5	; 0x05
     3e4:	00 97       	sbiw	r24, 0x00	; 0
     3e6:	61 f0       	breq	.+24     	; 0x400 <DIO_u8SetPortDirection+0x54>
     3e8:	1f c0       	rjmp	.+62     	; 0x428 <DIO_u8SetPortDirection+0x7c>
     3ea:	2c 81       	ldd	r18, Y+4	; 0x04
     3ec:	3d 81       	ldd	r19, Y+5	; 0x05
     3ee:	22 30       	cpi	r18, 0x02	; 2
     3f0:	31 05       	cpc	r19, r1
     3f2:	81 f0       	breq	.+32     	; 0x414 <DIO_u8SetPortDirection+0x68>
     3f4:	8c 81       	ldd	r24, Y+4	; 0x04
     3f6:	9d 81       	ldd	r25, Y+5	; 0x05
     3f8:	83 30       	cpi	r24, 0x03	; 3
     3fa:	91 05       	cpc	r25, r1
     3fc:	81 f0       	breq	.+32     	; 0x41e <DIO_u8SetPortDirection+0x72>
     3fe:	14 c0       	rjmp	.+40     	; 0x428 <DIO_u8SetPortDirection+0x7c>
	{
	case DIO_u8_PORTA: DDRA=Copy_u8Direction; break;
     400:	ea e3       	ldi	r30, 0x3A	; 58
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	8b 81       	ldd	r24, Y+3	; 0x03
     406:	80 83       	st	Z, r24
     408:	10 c0       	rjmp	.+32     	; 0x42a <DIO_u8SetPortDirection+0x7e>
	case DIO_u8_PORTB: DDRB=Copy_u8Direction; break;
     40a:	e7 e3       	ldi	r30, 0x37	; 55
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	8b 81       	ldd	r24, Y+3	; 0x03
     410:	80 83       	st	Z, r24
     412:	0b c0       	rjmp	.+22     	; 0x42a <DIO_u8SetPortDirection+0x7e>
	case DIO_u8_PORTC: DDRC=Copy_u8Direction; break;
     414:	e4 e3       	ldi	r30, 0x34	; 52
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	8b 81       	ldd	r24, Y+3	; 0x03
     41a:	80 83       	st	Z, r24
     41c:	06 c0       	rjmp	.+12     	; 0x42a <DIO_u8SetPortDirection+0x7e>
	case DIO_u8_PORTD: DDRD=Copy_u8Direction; break;
     41e:	e1 e3       	ldi	r30, 0x31	; 49
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	8b 81       	ldd	r24, Y+3	; 0x03
     424:	80 83       	st	Z, r24
     426:	01 c0       	rjmp	.+2      	; 0x42a <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=NOK;         break;
     428:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
     42a:	89 81       	ldd	r24, Y+1	; 0x01
}
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	cf 91       	pop	r28
     438:	df 91       	pop	r29
     43a:	08 95       	ret

0000043c <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
     43c:	df 93       	push	r29
     43e:	cf 93       	push	r28
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	28 97       	sbiw	r28, 0x08	; 8
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	8a 83       	std	Y+2, r24	; 0x02
     452:	6b 83       	std	Y+3, r22	; 0x03
     454:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8Pin > DIO_u8_PIN7))
     45a:	8b 81       	ldd	r24, Y+3	; 0x03
     45c:	88 30       	cpi	r24, 0x08	; 8
     45e:	10 f0       	brcs	.+4      	; 0x464 <__stack+0x5>
	{
		Local_u8ErrorState=NOK;
     460:	19 82       	std	Y+1, r1	; 0x01
     462:	ee c0       	rjmp	.+476    	; 0x640 <__stack+0x1e1>
	}
	else
	{
		if(Copy_u8Value == DIO_u8_PIN_LOW)
     464:	8c 81       	ldd	r24, Y+4	; 0x04
     466:	88 23       	and	r24, r24
     468:	09 f0       	breq	.+2      	; 0x46c <__stack+0xd>
     46a:	76 c0       	rjmp	.+236    	; 0x558 <__stack+0xf9>
		{
			switch(Copy_u8Port)
     46c:	8a 81       	ldd	r24, Y+2	; 0x02
     46e:	28 2f       	mov	r18, r24
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	38 87       	std	Y+8, r19	; 0x08
     474:	2f 83       	std	Y+7, r18	; 0x07
     476:	8f 81       	ldd	r24, Y+7	; 0x07
     478:	98 85       	ldd	r25, Y+8	; 0x08
     47a:	81 30       	cpi	r24, 0x01	; 1
     47c:	91 05       	cpc	r25, r1
     47e:	59 f1       	breq	.+86     	; 0x4d6 <__stack+0x77>
     480:	2f 81       	ldd	r18, Y+7	; 0x07
     482:	38 85       	ldd	r19, Y+8	; 0x08
     484:	22 30       	cpi	r18, 0x02	; 2
     486:	31 05       	cpc	r19, r1
     488:	2c f4       	brge	.+10     	; 0x494 <__stack+0x35>
     48a:	8f 81       	ldd	r24, Y+7	; 0x07
     48c:	98 85       	ldd	r25, Y+8	; 0x08
     48e:	00 97       	sbiw	r24, 0x00	; 0
     490:	69 f0       	breq	.+26     	; 0x4ac <__stack+0x4d>
     492:	60 c0       	rjmp	.+192    	; 0x554 <__stack+0xf5>
     494:	2f 81       	ldd	r18, Y+7	; 0x07
     496:	38 85       	ldd	r19, Y+8	; 0x08
     498:	22 30       	cpi	r18, 0x02	; 2
     49a:	31 05       	cpc	r19, r1
     49c:	89 f1       	breq	.+98     	; 0x500 <__stack+0xa1>
     49e:	8f 81       	ldd	r24, Y+7	; 0x07
     4a0:	98 85       	ldd	r25, Y+8	; 0x08
     4a2:	83 30       	cpi	r24, 0x03	; 3
     4a4:	91 05       	cpc	r25, r1
     4a6:	09 f4       	brne	.+2      	; 0x4aa <__stack+0x4b>
     4a8:	40 c0       	rjmp	.+128    	; 0x52a <__stack+0xcb>
     4aa:	54 c0       	rjmp	.+168    	; 0x554 <__stack+0xf5>
			{
			case DIO_u8_PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
     4ac:	ab e3       	ldi	r26, 0x3B	; 59
     4ae:	b0 e0       	ldi	r27, 0x00	; 0
     4b0:	eb e3       	ldi	r30, 0x3B	; 59
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	80 81       	ld	r24, Z
     4b6:	48 2f       	mov	r20, r24
     4b8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ba:	28 2f       	mov	r18, r24
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	02 2e       	mov	r0, r18
     4c4:	02 c0       	rjmp	.+4      	; 0x4ca <__stack+0x6b>
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	0a 94       	dec	r0
     4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <__stack+0x67>
     4ce:	80 95       	com	r24
     4d0:	84 23       	and	r24, r20
     4d2:	8c 93       	st	X, r24
     4d4:	b5 c0       	rjmp	.+362    	; 0x640 <__stack+0x1e1>
			case DIO_u8_PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
     4d6:	a8 e3       	ldi	r26, 0x38	; 56
     4d8:	b0 e0       	ldi	r27, 0x00	; 0
     4da:	e8 e3       	ldi	r30, 0x38	; 56
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	80 81       	ld	r24, Z
     4e0:	48 2f       	mov	r20, r24
     4e2:	8b 81       	ldd	r24, Y+3	; 0x03
     4e4:	28 2f       	mov	r18, r24
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	02 2e       	mov	r0, r18
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <__stack+0x95>
     4f0:	88 0f       	add	r24, r24
     4f2:	99 1f       	adc	r25, r25
     4f4:	0a 94       	dec	r0
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <__stack+0x91>
     4f8:	80 95       	com	r24
     4fa:	84 23       	and	r24, r20
     4fc:	8c 93       	st	X, r24
     4fe:	a0 c0       	rjmp	.+320    	; 0x640 <__stack+0x1e1>
			case DIO_u8_PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
     500:	a5 e3       	ldi	r26, 0x35	; 53
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e5 e3       	ldi	r30, 0x35	; 53
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	80 81       	ld	r24, Z
     50a:	48 2f       	mov	r20, r24
     50c:	8b 81       	ldd	r24, Y+3	; 0x03
     50e:	28 2f       	mov	r18, r24
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	02 2e       	mov	r0, r18
     518:	02 c0       	rjmp	.+4      	; 0x51e <__stack+0xbf>
     51a:	88 0f       	add	r24, r24
     51c:	99 1f       	adc	r25, r25
     51e:	0a 94       	dec	r0
     520:	e2 f7       	brpl	.-8      	; 0x51a <__stack+0xbb>
     522:	80 95       	com	r24
     524:	84 23       	and	r24, r20
     526:	8c 93       	st	X, r24
     528:	8b c0       	rjmp	.+278    	; 0x640 <__stack+0x1e1>
			case DIO_u8_PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
     52a:	a2 e3       	ldi	r26, 0x32	; 50
     52c:	b0 e0       	ldi	r27, 0x00	; 0
     52e:	e2 e3       	ldi	r30, 0x32	; 50
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	80 81       	ld	r24, Z
     534:	48 2f       	mov	r20, r24
     536:	8b 81       	ldd	r24, Y+3	; 0x03
     538:	28 2f       	mov	r18, r24
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	02 2e       	mov	r0, r18
     542:	02 c0       	rjmp	.+4      	; 0x548 <__stack+0xe9>
     544:	88 0f       	add	r24, r24
     546:	99 1f       	adc	r25, r25
     548:	0a 94       	dec	r0
     54a:	e2 f7       	brpl	.-8      	; 0x544 <__stack+0xe5>
     54c:	80 95       	com	r24
     54e:	84 23       	and	r24, r20
     550:	8c 93       	st	X, r24
     552:	76 c0       	rjmp	.+236    	; 0x640 <__stack+0x1e1>
			default: Local_u8ErrorState=NOK;              break;
     554:	19 82       	std	Y+1, r1	; 0x01
     556:	74 c0       	rjmp	.+232    	; 0x640 <__stack+0x1e1>
			}
		}
		else if (Copy_u8Value == DIO_u8_PIN_HIGH)
     558:	8c 81       	ldd	r24, Y+4	; 0x04
     55a:	81 30       	cpi	r24, 0x01	; 1
     55c:	09 f0       	breq	.+2      	; 0x560 <__stack+0x101>
     55e:	70 c0       	rjmp	.+224    	; 0x640 <__stack+0x1e1>
		{
			switch(Copy_u8Port)
     560:	8a 81       	ldd	r24, Y+2	; 0x02
     562:	28 2f       	mov	r18, r24
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	3e 83       	std	Y+6, r19	; 0x06
     568:	2d 83       	std	Y+5, r18	; 0x05
     56a:	8d 81       	ldd	r24, Y+5	; 0x05
     56c:	9e 81       	ldd	r25, Y+6	; 0x06
     56e:	81 30       	cpi	r24, 0x01	; 1
     570:	91 05       	cpc	r25, r1
     572:	49 f1       	breq	.+82     	; 0x5c6 <__stack+0x167>
     574:	2d 81       	ldd	r18, Y+5	; 0x05
     576:	3e 81       	ldd	r19, Y+6	; 0x06
     578:	22 30       	cpi	r18, 0x02	; 2
     57a:	31 05       	cpc	r19, r1
     57c:	2c f4       	brge	.+10     	; 0x588 <__stack+0x129>
     57e:	8d 81       	ldd	r24, Y+5	; 0x05
     580:	9e 81       	ldd	r25, Y+6	; 0x06
     582:	00 97       	sbiw	r24, 0x00	; 0
     584:	61 f0       	breq	.+24     	; 0x59e <__stack+0x13f>
     586:	5b c0       	rjmp	.+182    	; 0x63e <__stack+0x1df>
     588:	2d 81       	ldd	r18, Y+5	; 0x05
     58a:	3e 81       	ldd	r19, Y+6	; 0x06
     58c:	22 30       	cpi	r18, 0x02	; 2
     58e:	31 05       	cpc	r19, r1
     590:	71 f1       	breq	.+92     	; 0x5ee <__stack+0x18f>
     592:	8d 81       	ldd	r24, Y+5	; 0x05
     594:	9e 81       	ldd	r25, Y+6	; 0x06
     596:	83 30       	cpi	r24, 0x03	; 3
     598:	91 05       	cpc	r25, r1
     59a:	e9 f1       	breq	.+122    	; 0x616 <__stack+0x1b7>
     59c:	50 c0       	rjmp	.+160    	; 0x63e <__stack+0x1df>
			{
			case DIO_u8_PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
     59e:	ab e3       	ldi	r26, 0x3B	; 59
     5a0:	b0 e0       	ldi	r27, 0x00	; 0
     5a2:	eb e3       	ldi	r30, 0x3B	; 59
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	80 81       	ld	r24, Z
     5a8:	48 2f       	mov	r20, r24
     5aa:	8b 81       	ldd	r24, Y+3	; 0x03
     5ac:	28 2f       	mov	r18, r24
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	02 2e       	mov	r0, r18
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <__stack+0x15d>
     5b8:	88 0f       	add	r24, r24
     5ba:	99 1f       	adc	r25, r25
     5bc:	0a 94       	dec	r0
     5be:	e2 f7       	brpl	.-8      	; 0x5b8 <__stack+0x159>
     5c0:	84 2b       	or	r24, r20
     5c2:	8c 93       	st	X, r24
     5c4:	3d c0       	rjmp	.+122    	; 0x640 <__stack+0x1e1>
			case DIO_u8_PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
     5c6:	a8 e3       	ldi	r26, 0x38	; 56
     5c8:	b0 e0       	ldi	r27, 0x00	; 0
     5ca:	e8 e3       	ldi	r30, 0x38	; 56
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	80 81       	ld	r24, Z
     5d0:	48 2f       	mov	r20, r24
     5d2:	8b 81       	ldd	r24, Y+3	; 0x03
     5d4:	28 2f       	mov	r18, r24
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	02 2e       	mov	r0, r18
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <__stack+0x185>
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	0a 94       	dec	r0
     5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <__stack+0x181>
     5e8:	84 2b       	or	r24, r20
     5ea:	8c 93       	st	X, r24
     5ec:	29 c0       	rjmp	.+82     	; 0x640 <__stack+0x1e1>
			case DIO_u8_PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
     5ee:	a5 e3       	ldi	r26, 0x35	; 53
     5f0:	b0 e0       	ldi	r27, 0x00	; 0
     5f2:	e5 e3       	ldi	r30, 0x35	; 53
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	48 2f       	mov	r20, r24
     5fa:	8b 81       	ldd	r24, Y+3	; 0x03
     5fc:	28 2f       	mov	r18, r24
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	02 2e       	mov	r0, r18
     606:	02 c0       	rjmp	.+4      	; 0x60c <__stack+0x1ad>
     608:	88 0f       	add	r24, r24
     60a:	99 1f       	adc	r25, r25
     60c:	0a 94       	dec	r0
     60e:	e2 f7       	brpl	.-8      	; 0x608 <__stack+0x1a9>
     610:	84 2b       	or	r24, r20
     612:	8c 93       	st	X, r24
     614:	15 c0       	rjmp	.+42     	; 0x640 <__stack+0x1e1>
			case DIO_u8_PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
     616:	a2 e3       	ldi	r26, 0x32	; 50
     618:	b0 e0       	ldi	r27, 0x00	; 0
     61a:	e2 e3       	ldi	r30, 0x32	; 50
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	80 81       	ld	r24, Z
     620:	48 2f       	mov	r20, r24
     622:	8b 81       	ldd	r24, Y+3	; 0x03
     624:	28 2f       	mov	r18, r24
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	02 2e       	mov	r0, r18
     62e:	02 c0       	rjmp	.+4      	; 0x634 <__stack+0x1d5>
     630:	88 0f       	add	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	0a 94       	dec	r0
     636:	e2 f7       	brpl	.-8      	; 0x630 <__stack+0x1d1>
     638:	84 2b       	or	r24, r20
     63a:	8c 93       	st	X, r24
     63c:	01 c0       	rjmp	.+2      	; 0x640 <__stack+0x1e1>
			default: Local_u8ErrorState=NOK;              break;
     63e:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	}
	return Local_u8ErrorState;
     640:	89 81       	ldd	r24, Y+1	; 0x01
}
     642:	28 96       	adiw	r28, 0x08	; 8
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	de bf       	out	0x3e, r29	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	cf 91       	pop	r28
     650:	df 91       	pop	r29
     652:	08 95       	ret

00000654 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
     654:	df 93       	push	r29
     656:	cf 93       	push	r28
     658:	00 d0       	rcall	.+0      	; 0x65a <DIO_u8SetPortValue+0x6>
     65a:	00 d0       	rcall	.+0      	; 0x65c <DIO_u8SetPortValue+0x8>
     65c:	0f 92       	push	r0
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
     662:	8a 83       	std	Y+2, r24	; 0x02
     664:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8Port)
     66a:	8a 81       	ldd	r24, Y+2	; 0x02
     66c:	28 2f       	mov	r18, r24
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	3d 83       	std	Y+5, r19	; 0x05
     672:	2c 83       	std	Y+4, r18	; 0x04
     674:	8c 81       	ldd	r24, Y+4	; 0x04
     676:	9d 81       	ldd	r25, Y+5	; 0x05
     678:	81 30       	cpi	r24, 0x01	; 1
     67a:	91 05       	cpc	r25, r1
     67c:	d1 f0       	breq	.+52     	; 0x6b2 <DIO_u8SetPortValue+0x5e>
     67e:	2c 81       	ldd	r18, Y+4	; 0x04
     680:	3d 81       	ldd	r19, Y+5	; 0x05
     682:	22 30       	cpi	r18, 0x02	; 2
     684:	31 05       	cpc	r19, r1
     686:	2c f4       	brge	.+10     	; 0x692 <DIO_u8SetPortValue+0x3e>
     688:	8c 81       	ldd	r24, Y+4	; 0x04
     68a:	9d 81       	ldd	r25, Y+5	; 0x05
     68c:	00 97       	sbiw	r24, 0x00	; 0
     68e:	61 f0       	breq	.+24     	; 0x6a8 <DIO_u8SetPortValue+0x54>
     690:	1f c0       	rjmp	.+62     	; 0x6d0 <DIO_u8SetPortValue+0x7c>
     692:	2c 81       	ldd	r18, Y+4	; 0x04
     694:	3d 81       	ldd	r19, Y+5	; 0x05
     696:	22 30       	cpi	r18, 0x02	; 2
     698:	31 05       	cpc	r19, r1
     69a:	81 f0       	breq	.+32     	; 0x6bc <DIO_u8SetPortValue+0x68>
     69c:	8c 81       	ldd	r24, Y+4	; 0x04
     69e:	9d 81       	ldd	r25, Y+5	; 0x05
     6a0:	83 30       	cpi	r24, 0x03	; 3
     6a2:	91 05       	cpc	r25, r1
     6a4:	81 f0       	breq	.+32     	; 0x6c6 <DIO_u8SetPortValue+0x72>
     6a6:	14 c0       	rjmp	.+40     	; 0x6d0 <DIO_u8SetPortValue+0x7c>
	{
	case DIO_u8_PORTA: PORTA=Copy_u8Value; break;
     6a8:	eb e3       	ldi	r30, 0x3B	; 59
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	8b 81       	ldd	r24, Y+3	; 0x03
     6ae:	80 83       	st	Z, r24
     6b0:	10 c0       	rjmp	.+32     	; 0x6d2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTB: PORTB=Copy_u8Value; break;
     6b2:	e8 e3       	ldi	r30, 0x38	; 56
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	8b 81       	ldd	r24, Y+3	; 0x03
     6b8:	80 83       	st	Z, r24
     6ba:	0b c0       	rjmp	.+22     	; 0x6d2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTC: PORTC=Copy_u8Value; break;
     6bc:	e5 e3       	ldi	r30, 0x35	; 53
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	8b 81       	ldd	r24, Y+3	; 0x03
     6c2:	80 83       	st	Z, r24
     6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTD: PORTD=Copy_u8Value; break;
     6c6:	e2 e3       	ldi	r30, 0x32	; 50
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	8b 81       	ldd	r24, Y+3	; 0x03
     6cc:	80 83       	st	Z, r24
     6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=NOK;          break;
     6d0:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
     6d2:	89 81       	ldd	r24, Y+1	; 0x01
}
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	0f 90       	pop	r0
     6de:	cf 91       	pop	r28
     6e0:	df 91       	pop	r29
     6e2:	08 95       	ret

000006e4 <DIO_u8ReadPinValue>:

u8 DIO_u8ReadPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
     6e4:	df 93       	push	r29
     6e6:	cf 93       	push	r28
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	27 97       	sbiw	r28, 0x07	; 7
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	de bf       	out	0x3e, r29	; 62
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	cd bf       	out	0x3d, r28	; 61
     6f8:	8a 83       	std	Y+2, r24	; 0x02
     6fa:	6b 83       	std	Y+3, r22	; 0x03
     6fc:	5d 83       	std	Y+5, r21	; 0x05
     6fe:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8Value == NULL)
     704:	8c 81       	ldd	r24, Y+4	; 0x04
     706:	9d 81       	ldd	r25, Y+5	; 0x05
     708:	00 97       	sbiw	r24, 0x00	; 0
     70a:	19 f4       	brne	.+6      	; 0x712 <DIO_u8ReadPinValue+0x2e>
	{
		Local_u8ErrorState=NULL_POINTER;
     70c:	82 e0       	ldi	r24, 0x02	; 2
     70e:	89 83       	std	Y+1, r24	; 0x01
     710:	77 c0       	rjmp	.+238    	; 0x800 <DIO_u8ReadPinValue+0x11c>
	}
	else if((Copy_u8Pin > DIO_u8_PIN7))
     712:	8b 81       	ldd	r24, Y+3	; 0x03
     714:	88 30       	cpi	r24, 0x08	; 8
     716:	10 f0       	brcs	.+4      	; 0x71c <DIO_u8ReadPinValue+0x38>
	{
		Local_u8ErrorState=NOK;
     718:	19 82       	std	Y+1, r1	; 0x01
     71a:	72 c0       	rjmp	.+228    	; 0x800 <DIO_u8ReadPinValue+0x11c>
	}
	else
	{
		switch(Copy_u8Port)
     71c:	8a 81       	ldd	r24, Y+2	; 0x02
     71e:	28 2f       	mov	r18, r24
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	3f 83       	std	Y+7, r19	; 0x07
     724:	2e 83       	std	Y+6, r18	; 0x06
     726:	4e 81       	ldd	r20, Y+6	; 0x06
     728:	5f 81       	ldd	r21, Y+7	; 0x07
     72a:	41 30       	cpi	r20, 0x01	; 1
     72c:	51 05       	cpc	r21, r1
     72e:	59 f1       	breq	.+86     	; 0x786 <DIO_u8ReadPinValue+0xa2>
     730:	8e 81       	ldd	r24, Y+6	; 0x06
     732:	9f 81       	ldd	r25, Y+7	; 0x07
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	91 05       	cpc	r25, r1
     738:	34 f4       	brge	.+12     	; 0x746 <DIO_u8ReadPinValue+0x62>
     73a:	2e 81       	ldd	r18, Y+6	; 0x06
     73c:	3f 81       	ldd	r19, Y+7	; 0x07
     73e:	21 15       	cp	r18, r1
     740:	31 05       	cpc	r19, r1
     742:	69 f0       	breq	.+26     	; 0x75e <DIO_u8ReadPinValue+0x7a>
     744:	5c c0       	rjmp	.+184    	; 0x7fe <DIO_u8ReadPinValue+0x11a>
     746:	4e 81       	ldd	r20, Y+6	; 0x06
     748:	5f 81       	ldd	r21, Y+7	; 0x07
     74a:	42 30       	cpi	r20, 0x02	; 2
     74c:	51 05       	cpc	r21, r1
     74e:	79 f1       	breq	.+94     	; 0x7ae <DIO_u8ReadPinValue+0xca>
     750:	8e 81       	ldd	r24, Y+6	; 0x06
     752:	9f 81       	ldd	r25, Y+7	; 0x07
     754:	83 30       	cpi	r24, 0x03	; 3
     756:	91 05       	cpc	r25, r1
     758:	09 f4       	brne	.+2      	; 0x75c <DIO_u8ReadPinValue+0x78>
     75a:	3d c0       	rjmp	.+122    	; 0x7d6 <DIO_u8ReadPinValue+0xf2>
     75c:	50 c0       	rjmp	.+160    	; 0x7fe <DIO_u8ReadPinValue+0x11a>
		{
		case DIO_u8_PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
     75e:	e9 e3       	ldi	r30, 0x39	; 57
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	80 81       	ld	r24, Z
     764:	28 2f       	mov	r18, r24
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	8b 81       	ldd	r24, Y+3	; 0x03
     76a:	88 2f       	mov	r24, r24
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	a9 01       	movw	r20, r18
     770:	02 c0       	rjmp	.+4      	; 0x776 <DIO_u8ReadPinValue+0x92>
     772:	55 95       	asr	r21
     774:	47 95       	ror	r20
     776:	8a 95       	dec	r24
     778:	e2 f7       	brpl	.-8      	; 0x772 <DIO_u8ReadPinValue+0x8e>
     77a:	ca 01       	movw	r24, r20
     77c:	81 70       	andi	r24, 0x01	; 1
     77e:	ec 81       	ldd	r30, Y+4	; 0x04
     780:	fd 81       	ldd	r31, Y+5	; 0x05
     782:	80 83       	st	Z, r24
     784:	3d c0       	rjmp	.+122    	; 0x800 <DIO_u8ReadPinValue+0x11c>
		case DIO_u8_PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
     786:	e6 e3       	ldi	r30, 0x36	; 54
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	28 2f       	mov	r18, r24
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	8b 81       	ldd	r24, Y+3	; 0x03
     792:	88 2f       	mov	r24, r24
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	a9 01       	movw	r20, r18
     798:	02 c0       	rjmp	.+4      	; 0x79e <DIO_u8ReadPinValue+0xba>
     79a:	55 95       	asr	r21
     79c:	47 95       	ror	r20
     79e:	8a 95       	dec	r24
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <DIO_u8ReadPinValue+0xb6>
     7a2:	ca 01       	movw	r24, r20
     7a4:	81 70       	andi	r24, 0x01	; 1
     7a6:	ec 81       	ldd	r30, Y+4	; 0x04
     7a8:	fd 81       	ldd	r31, Y+5	; 0x05
     7aa:	80 83       	st	Z, r24
     7ac:	29 c0       	rjmp	.+82     	; 0x800 <DIO_u8ReadPinValue+0x11c>
		case DIO_u8_PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
     7ae:	e3 e3       	ldi	r30, 0x33	; 51
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	80 81       	ld	r24, Z
     7b4:	28 2f       	mov	r18, r24
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ba:	88 2f       	mov	r24, r24
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	a9 01       	movw	r20, r18
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <DIO_u8ReadPinValue+0xe2>
     7c2:	55 95       	asr	r21
     7c4:	47 95       	ror	r20
     7c6:	8a 95       	dec	r24
     7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <DIO_u8ReadPinValue+0xde>
     7ca:	ca 01       	movw	r24, r20
     7cc:	81 70       	andi	r24, 0x01	; 1
     7ce:	ec 81       	ldd	r30, Y+4	; 0x04
     7d0:	fd 81       	ldd	r31, Y+5	; 0x05
     7d2:	80 83       	st	Z, r24
     7d4:	15 c0       	rjmp	.+42     	; 0x800 <DIO_u8ReadPinValue+0x11c>
		case DIO_u8_PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
     7d6:	e0 e3       	ldi	r30, 0x30	; 48
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	80 81       	ld	r24, Z
     7dc:	28 2f       	mov	r18, r24
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	8b 81       	ldd	r24, Y+3	; 0x03
     7e2:	88 2f       	mov	r24, r24
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	a9 01       	movw	r20, r18
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <DIO_u8ReadPinValue+0x10a>
     7ea:	55 95       	asr	r21
     7ec:	47 95       	ror	r20
     7ee:	8a 95       	dec	r24
     7f0:	e2 f7       	brpl	.-8      	; 0x7ea <DIO_u8ReadPinValue+0x106>
     7f2:	ca 01       	movw	r24, r20
     7f4:	81 70       	andi	r24, 0x01	; 1
     7f6:	ec 81       	ldd	r30, Y+4	; 0x04
     7f8:	fd 81       	ldd	r31, Y+5	; 0x05
     7fa:	80 83       	st	Z, r24
     7fc:	01 c0       	rjmp	.+2      	; 0x800 <DIO_u8ReadPinValue+0x11c>
		default: Local_u8ErrorState=NOK;                           break;
     7fe:	19 82       	std	Y+1, r1	; 0x01
		}
	}

	return Local_u8ErrorState;
     800:	89 81       	ldd	r24, Y+1	; 0x01
}
     802:	27 96       	adiw	r28, 0x07	; 7
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	de bf       	out	0x3e, r29	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	cd bf       	out	0x3d, r28	; 61
     80e:	cf 91       	pop	r28
     810:	df 91       	pop	r29
     812:	08 95       	ret

00000814 <DIO_u8TogglePinVlaue>:

u8 DIO_u8TogglePinVlaue(u8 Copy_u8Port, u8 Copy_u8PinNum)
{
     814:	df 93       	push	r29
     816:	cf 93       	push	r28
     818:	00 d0       	rcall	.+0      	; 0x81a <DIO_u8TogglePinVlaue+0x6>
     81a:	00 d0       	rcall	.+0      	; 0x81c <DIO_u8TogglePinVlaue+0x8>
     81c:	0f 92       	push	r0
     81e:	cd b7       	in	r28, 0x3d	; 61
     820:	de b7       	in	r29, 0x3e	; 62
     822:	8a 83       	std	Y+2, r24	; 0x02
     824:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PinNum > DIO_u8_PIN7)
     82a:	8b 81       	ldd	r24, Y+3	; 0x03
     82c:	88 30       	cpi	r24, 0x08	; 8
     82e:	10 f0       	brcs	.+4      	; 0x834 <DIO_u8TogglePinVlaue+0x20>
	{
		Local_u8ErrorState = NOK;
     830:	19 82       	std	Y+1, r1	; 0x01
     832:	70 c0       	rjmp	.+224    	; 0x914 <DIO_u8TogglePinVlaue+0x100>
	}
	else
	{
		switch (Copy_u8Port)
     834:	8a 81       	ldd	r24, Y+2	; 0x02
     836:	28 2f       	mov	r18, r24
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	3d 83       	std	Y+5, r19	; 0x05
     83c:	2c 83       	std	Y+4, r18	; 0x04
     83e:	8c 81       	ldd	r24, Y+4	; 0x04
     840:	9d 81       	ldd	r25, Y+5	; 0x05
     842:	81 30       	cpi	r24, 0x01	; 1
     844:	91 05       	cpc	r25, r1
     846:	49 f1       	breq	.+82     	; 0x89a <DIO_u8TogglePinVlaue+0x86>
     848:	2c 81       	ldd	r18, Y+4	; 0x04
     84a:	3d 81       	ldd	r19, Y+5	; 0x05
     84c:	22 30       	cpi	r18, 0x02	; 2
     84e:	31 05       	cpc	r19, r1
     850:	2c f4       	brge	.+10     	; 0x85c <DIO_u8TogglePinVlaue+0x48>
     852:	8c 81       	ldd	r24, Y+4	; 0x04
     854:	9d 81       	ldd	r25, Y+5	; 0x05
     856:	00 97       	sbiw	r24, 0x00	; 0
     858:	61 f0       	breq	.+24     	; 0x872 <DIO_u8TogglePinVlaue+0x5e>
     85a:	5b c0       	rjmp	.+182    	; 0x912 <DIO_u8TogglePinVlaue+0xfe>
     85c:	2c 81       	ldd	r18, Y+4	; 0x04
     85e:	3d 81       	ldd	r19, Y+5	; 0x05
     860:	22 30       	cpi	r18, 0x02	; 2
     862:	31 05       	cpc	r19, r1
     864:	71 f1       	breq	.+92     	; 0x8c2 <DIO_u8TogglePinVlaue+0xae>
     866:	8c 81       	ldd	r24, Y+4	; 0x04
     868:	9d 81       	ldd	r25, Y+5	; 0x05
     86a:	83 30       	cpi	r24, 0x03	; 3
     86c:	91 05       	cpc	r25, r1
     86e:	e9 f1       	breq	.+122    	; 0x8ea <DIO_u8TogglePinVlaue+0xd6>
     870:	50 c0       	rjmp	.+160    	; 0x912 <DIO_u8TogglePinVlaue+0xfe>
		{
		case DIO_u8_PORTA:
			TOGGLE_BIT(PORTA, Copy_u8PinNum);
     872:	ab e3       	ldi	r26, 0x3B	; 59
     874:	b0 e0       	ldi	r27, 0x00	; 0
     876:	eb e3       	ldi	r30, 0x3B	; 59
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	80 81       	ld	r24, Z
     87c:	48 2f       	mov	r20, r24
     87e:	8b 81       	ldd	r24, Y+3	; 0x03
     880:	28 2f       	mov	r18, r24
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	02 2e       	mov	r0, r18
     88a:	02 c0       	rjmp	.+4      	; 0x890 <DIO_u8TogglePinVlaue+0x7c>
     88c:	88 0f       	add	r24, r24
     88e:	99 1f       	adc	r25, r25
     890:	0a 94       	dec	r0
     892:	e2 f7       	brpl	.-8      	; 0x88c <DIO_u8TogglePinVlaue+0x78>
     894:	84 27       	eor	r24, r20
     896:	8c 93       	st	X, r24
     898:	3d c0       	rjmp	.+122    	; 0x914 <DIO_u8TogglePinVlaue+0x100>
			break;
		case DIO_u8_PORTB:
			TOGGLE_BIT(PORTB, Copy_u8PinNum);
     89a:	a8 e3       	ldi	r26, 0x38	; 56
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e8 e3       	ldi	r30, 0x38	; 56
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 81       	ld	r24, Z
     8a4:	48 2f       	mov	r20, r24
     8a6:	8b 81       	ldd	r24, Y+3	; 0x03
     8a8:	28 2f       	mov	r18, r24
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	02 2e       	mov	r0, r18
     8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <DIO_u8TogglePinVlaue+0xa4>
     8b4:	88 0f       	add	r24, r24
     8b6:	99 1f       	adc	r25, r25
     8b8:	0a 94       	dec	r0
     8ba:	e2 f7       	brpl	.-8      	; 0x8b4 <DIO_u8TogglePinVlaue+0xa0>
     8bc:	84 27       	eor	r24, r20
     8be:	8c 93       	st	X, r24
     8c0:	29 c0       	rjmp	.+82     	; 0x914 <DIO_u8TogglePinVlaue+0x100>
			break;
		case DIO_u8_PORTC:
			TOGGLE_BIT(PORTC, Copy_u8PinNum);
     8c2:	a5 e3       	ldi	r26, 0x35	; 53
     8c4:	b0 e0       	ldi	r27, 0x00	; 0
     8c6:	e5 e3       	ldi	r30, 0x35	; 53
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	80 81       	ld	r24, Z
     8cc:	48 2f       	mov	r20, r24
     8ce:	8b 81       	ldd	r24, Y+3	; 0x03
     8d0:	28 2f       	mov	r18, r24
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	02 2e       	mov	r0, r18
     8da:	02 c0       	rjmp	.+4      	; 0x8e0 <DIO_u8TogglePinVlaue+0xcc>
     8dc:	88 0f       	add	r24, r24
     8de:	99 1f       	adc	r25, r25
     8e0:	0a 94       	dec	r0
     8e2:	e2 f7       	brpl	.-8      	; 0x8dc <DIO_u8TogglePinVlaue+0xc8>
     8e4:	84 27       	eor	r24, r20
     8e6:	8c 93       	st	X, r24
     8e8:	15 c0       	rjmp	.+42     	; 0x914 <DIO_u8TogglePinVlaue+0x100>
			break;
		case DIO_u8_PORTD:
			TOGGLE_BIT(PORTD, Copy_u8PinNum);
     8ea:	a2 e3       	ldi	r26, 0x32	; 50
     8ec:	b0 e0       	ldi	r27, 0x00	; 0
     8ee:	e2 e3       	ldi	r30, 0x32	; 50
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	80 81       	ld	r24, Z
     8f4:	48 2f       	mov	r20, r24
     8f6:	8b 81       	ldd	r24, Y+3	; 0x03
     8f8:	28 2f       	mov	r18, r24
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	02 2e       	mov	r0, r18
     902:	02 c0       	rjmp	.+4      	; 0x908 <DIO_u8TogglePinVlaue+0xf4>
     904:	88 0f       	add	r24, r24
     906:	99 1f       	adc	r25, r25
     908:	0a 94       	dec	r0
     90a:	e2 f7       	brpl	.-8      	; 0x904 <DIO_u8TogglePinVlaue+0xf0>
     90c:	84 27       	eor	r24, r20
     90e:	8c 93       	st	X, r24
     910:	01 c0       	rjmp	.+2      	; 0x914 <DIO_u8TogglePinVlaue+0x100>
			break;
		default:
			Local_u8ErrorState = NOK;
     912:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}

	return Local_u8ErrorState;
     914:	89 81       	ldd	r24, Y+1	; 0x01
}
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	cf 91       	pop	r28
     922:	df 91       	pop	r29
     924:	08 95       	ret

00000926 <EXTI_voidINT0Init>:
static void (*EXTI_pvCallBackFunc[3])(void)={NULL};



void EXTI_voidINT0Init(void)
{
     926:	df 93       	push	r29
     928:	cf 93       	push	r28
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
#elif EXTI_u8_INT0_SENSE == EXTI_u8_FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
	SET_BIT(MCUCR,MCUCR_ISC01);

#elif EXTI_u8_INT0_SENSE == EXTI_u8_RISING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC00);
     92e:	a5 e5       	ldi	r26, 0x55	; 85
     930:	b0 e0       	ldi	r27, 0x00	; 0
     932:	e5 e5       	ldi	r30, 0x55	; 85
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	80 81       	ld	r24, Z
     938:	81 60       	ori	r24, 0x01	; 1
     93a:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
     93c:	a5 e5       	ldi	r26, 0x55	; 85
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	e5 e5       	ldi	r30, 0x55	; 85
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	80 81       	ld	r24, Z
     946:	82 60       	ori	r24, 0x02	; 2
     948:	8c 93       	st	X, r24

#endif

	/*1- Set the Initial state configuration*/
#if EXTI_u8_INT0_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
     94a:	ab e5       	ldi	r26, 0x5B	; 91
     94c:	b0 e0       	ldi	r27, 0x00	; 0
     94e:	eb e5       	ldi	r30, 0x5B	; 91
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	80 81       	ld	r24, Z
     954:	80 64       	ori	r24, 0x40	; 64
     956:	8c 93       	st	X, r24
#else
#error "Wrong EXTI_u8_INT0_INITIAL_STATE configuration option"

#endif

}
     958:	cf 91       	pop	r28
     95a:	df 91       	pop	r29
     95c:	08 95       	ret

0000095e <EXTI_voidINT1Init>:
void EXTI_voidINT1Init(void)
{
     95e:	df 93       	push	r29
     960:	cf 93       	push	r28
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
#elif EXTI_u8_INT1_SENSE == EXTI_u8_ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);

#elif EXTI_u8_INT1_SENSE == EXTI_u8_FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
     966:	a5 e5       	ldi	r26, 0x55	; 85
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e5 e5       	ldi	r30, 0x55	; 85
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	80 81       	ld	r24, Z
     970:	8b 7f       	andi	r24, 0xFB	; 251
     972:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
     974:	a5 e5       	ldi	r26, 0x55	; 85
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e5 e5       	ldi	r30, 0x55	; 85
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 81       	ld	r24, Z
     97e:	88 60       	ori	r24, 0x08	; 8
     980:	8c 93       	st	X, r24

#endif

	/*1- Set the Initial state configuration*/
#if EXTI_u8_INT1_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1);
     982:	ab e5       	ldi	r26, 0x5B	; 91
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	eb e5       	ldi	r30, 0x5B	; 91
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	80 81       	ld	r24, Z
     98c:	80 68       	ori	r24, 0x80	; 128
     98e:	8c 93       	st	X, r24

#else
#error "Wrong EXTI_u8_INT0_INITIAL_STATE configuration option"

#endif
}
     990:	cf 91       	pop	r28
     992:	df 91       	pop	r29
     994:	08 95       	ret

00000996 <EXTI_voidINT2Init>:
void EXTI_voidINT2Init(void)
{
     996:	df 93       	push	r29
     998:	cf 93       	push	r28
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
	/*1- Set the sense control configuration*/
#if EXTI_u8_INT1_SENSE == EXTI_u8_FALLING_EDGE
	CLR_BIT(MCUCR,MCUCSR_ISC2);
     99e:	a5 e5       	ldi	r26, 0x55	; 85
     9a0:	b0 e0       	ldi	r27, 0x00	; 0
     9a2:	e5 e5       	ldi	r30, 0x55	; 85
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	80 81       	ld	r24, Z
     9a8:	8f 7b       	andi	r24, 0xBF	; 191
     9aa:	8c 93       	st	X, r24

#endif

	/*1- Set the Initial state configuration*/
#if EXTI_u8_INT1_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1);
     9ac:	ab e5       	ldi	r26, 0x5B	; 91
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	eb e5       	ldi	r30, 0x5B	; 91
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	80 68       	ori	r24, 0x80	; 128
     9b8:	8c 93       	st	X, r24

#else
#error "Wrong EXTI_u8_INT0_INITIAL_STATE configuration option"

#endif
}
     9ba:	cf 91       	pop	r28
     9bc:	df 91       	pop	r29
     9be:	08 95       	ret

000009c0 <EXTI_u8SetSenseControl>:

u8 EXTI_u8SetSenseControl(u8 Copy_u8IntNum, u8 Copy_u8Sense)
{
     9c0:	df 93       	push	r29
     9c2:	cf 93       	push	r28
     9c4:	00 d0       	rcall	.+0      	; 0x9c6 <EXTI_u8SetSenseControl+0x6>
     9c6:	00 d0       	rcall	.+0      	; 0x9c8 <EXTI_u8SetSenseControl+0x8>
     9c8:	0f 92       	push	r0
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
     9ce:	8a 83       	std	Y+2, r24	; 0x02
     9d0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorSate = OK;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8IntNum)
     9d6:	8a 81       	ldd	r24, Y+2	; 0x02
     9d8:	28 2f       	mov	r18, r24
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	3d 83       	std	Y+5, r19	; 0x05
     9de:	2c 83       	std	Y+4, r18	; 0x04
     9e0:	8c 81       	ldd	r24, Y+4	; 0x04
     9e2:	9d 81       	ldd	r25, Y+5	; 0x05
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	91 05       	cpc	r25, r1
     9e8:	09 f4       	brne	.+2      	; 0x9ec <EXTI_u8SetSenseControl+0x2c>
     9ea:	55 c0       	rjmp	.+170    	; 0xa96 <EXTI_u8SetSenseControl+0xd6>
     9ec:	2c 81       	ldd	r18, Y+4	; 0x04
     9ee:	3d 81       	ldd	r19, Y+5	; 0x05
     9f0:	22 30       	cpi	r18, 0x02	; 2
     9f2:	31 05       	cpc	r19, r1
     9f4:	09 f4       	brne	.+2      	; 0x9f8 <EXTI_u8SetSenseControl+0x38>
     9f6:	99 c0       	rjmp	.+306    	; 0xb2a <EXTI_u8SetSenseControl+0x16a>
     9f8:	8c 81       	ldd	r24, Y+4	; 0x04
     9fa:	9d 81       	ldd	r25, Y+5	; 0x05
     9fc:	00 97       	sbiw	r24, 0x00	; 0
     9fe:	09 f0       	breq	.+2      	; 0xa02 <EXTI_u8SetSenseControl+0x42>
     a00:	ac c0       	rjmp	.+344    	; 0xb5a <EXTI_u8SetSenseControl+0x19a>
	{

	/*Set INT0 required Sense control*/
	case EXTI_u8_INT0:
		if(EXTI_u8_LOW_LEVEL == Copy_u8Sense)
     a02:	8b 81       	ldd	r24, Y+3	; 0x03
     a04:	84 30       	cpi	r24, 0x04	; 4
     a06:	79 f4       	brne	.+30     	; 0xa26 <EXTI_u8SetSenseControl+0x66>
		{
			CLR_BIT(MCUCR,MCUCR_ISC00);
     a08:	a5 e5       	ldi	r26, 0x55	; 85
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	e5 e5       	ldi	r30, 0x55	; 85
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	8e 7f       	andi	r24, 0xFE	; 254
     a14:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
     a16:	a5 e5       	ldi	r26, 0x55	; 85
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	e5 e5       	ldi	r30, 0x55	; 85
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	80 81       	ld	r24, Z
     a20:	8d 7f       	andi	r24, 0xFD	; 253
     a22:	8c 93       	st	X, r24
     a24:	9b c0       	rjmp	.+310    	; 0xb5c <EXTI_u8SetSenseControl+0x19c>
		}
		else if (EXTI_u8_ON_CHANGE == Copy_u8Sense)
     a26:	8b 81       	ldd	r24, Y+3	; 0x03
     a28:	83 30       	cpi	r24, 0x03	; 3
     a2a:	79 f4       	brne	.+30     	; 0xa4a <EXTI_u8SetSenseControl+0x8a>
		{
			SET_BIT(MCUCR,MCUCR_ISC00);
     a2c:	a5 e5       	ldi	r26, 0x55	; 85
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	e5 e5       	ldi	r30, 0x55	; 85
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	81 60       	ori	r24, 0x01	; 1
     a38:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
     a3a:	a5 e5       	ldi	r26, 0x55	; 85
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	e5 e5       	ldi	r30, 0x55	; 85
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	80 81       	ld	r24, Z
     a44:	8d 7f       	andi	r24, 0xFD	; 253
     a46:	8c 93       	st	X, r24
     a48:	89 c0       	rjmp	.+274    	; 0xb5c <EXTI_u8SetSenseControl+0x19c>
		}
		else if(EXTI_u8_FALLING_EDGE == Copy_u8Sense)
     a4a:	8b 81       	ldd	r24, Y+3	; 0x03
     a4c:	82 30       	cpi	r24, 0x02	; 2
     a4e:	79 f4       	brne	.+30     	; 0xa6e <EXTI_u8SetSenseControl+0xae>
		{
			CLR_BIT(MCUCR,MCUCR_ISC00);
     a50:	a5 e5       	ldi	r26, 0x55	; 85
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	e5 e5       	ldi	r30, 0x55	; 85
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	80 81       	ld	r24, Z
     a5a:	8e 7f       	andi	r24, 0xFE	; 254
     a5c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
     a5e:	a5 e5       	ldi	r26, 0x55	; 85
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	e5 e5       	ldi	r30, 0x55	; 85
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	80 81       	ld	r24, Z
     a68:	82 60       	ori	r24, 0x02	; 2
     a6a:	8c 93       	st	X, r24
     a6c:	77 c0       	rjmp	.+238    	; 0xb5c <EXTI_u8SetSenseControl+0x19c>
		}
		else if(EXTI_u8_RISING_EDGE == Copy_u8Sense)
     a6e:	8b 81       	ldd	r24, Y+3	; 0x03
     a70:	81 30       	cpi	r24, 0x01	; 1
     a72:	79 f4       	brne	.+30     	; 0xa92 <EXTI_u8SetSenseControl+0xd2>
		{
			SET_BIT(MCUCR,MCUCR_ISC00);
     a74:	a5 e5       	ldi	r26, 0x55	; 85
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	e5 e5       	ldi	r30, 0x55	; 85
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	80 81       	ld	r24, Z
     a7e:	81 60       	ori	r24, 0x01	; 1
     a80:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
     a82:	a5 e5       	ldi	r26, 0x55	; 85
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	e5 e5       	ldi	r30, 0x55	; 85
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	80 81       	ld	r24, Z
     a8c:	82 60       	ori	r24, 0x02	; 2
     a8e:	8c 93       	st	X, r24
     a90:	65 c0       	rjmp	.+202    	; 0xb5c <EXTI_u8SetSenseControl+0x19c>
		}
		else
		{
			Local_u8ErrorSate = NOK;
     a92:	19 82       	std	Y+1, r1	; 0x01
     a94:	63 c0       	rjmp	.+198    	; 0xb5c <EXTI_u8SetSenseControl+0x19c>
		}
		break;

		/*Set INT1 required Sense control*/
	case EXTI_u8_INT1:
		if(EXTI_u8_LOW_LEVEL == Copy_u8Sense)
     a96:	8b 81       	ldd	r24, Y+3	; 0x03
     a98:	84 30       	cpi	r24, 0x04	; 4
     a9a:	79 f4       	brne	.+30     	; 0xaba <EXTI_u8SetSenseControl+0xfa>
		{
			CLR_BIT(MCUCR,MCUCR_ISC10);
     a9c:	a5 e5       	ldi	r26, 0x55	; 85
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e5 e5       	ldi	r30, 0x55	; 85
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	80 81       	ld	r24, Z
     aa6:	8b 7f       	andi	r24, 0xFB	; 251
     aa8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
     aaa:	a5 e5       	ldi	r26, 0x55	; 85
     aac:	b0 e0       	ldi	r27, 0x00	; 0
     aae:	e5 e5       	ldi	r30, 0x55	; 85
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 81       	ld	r24, Z
     ab4:	87 7f       	andi	r24, 0xF7	; 247
     ab6:	8c 93       	st	X, r24
     ab8:	51 c0       	rjmp	.+162    	; 0xb5c <EXTI_u8SetSenseControl+0x19c>
		}
		else if (EXTI_u8_ON_CHANGE == Copy_u8Sense)
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	83 30       	cpi	r24, 0x03	; 3
     abe:	79 f4       	brne	.+30     	; 0xade <EXTI_u8SetSenseControl+0x11e>
		{
			SET_BIT(MCUCR,MCUCR_ISC10);
     ac0:	a5 e5       	ldi	r26, 0x55	; 85
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	e5 e5       	ldi	r30, 0x55	; 85
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	80 81       	ld	r24, Z
     aca:	84 60       	ori	r24, 0x04	; 4
     acc:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
     ace:	a5 e5       	ldi	r26, 0x55	; 85
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	e5 e5       	ldi	r30, 0x55	; 85
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	80 81       	ld	r24, Z
     ad8:	87 7f       	andi	r24, 0xF7	; 247
     ada:	8c 93       	st	X, r24
     adc:	3f c0       	rjmp	.+126    	; 0xb5c <EXTI_u8SetSenseControl+0x19c>
		}
		else if(EXTI_u8_FALLING_EDGE == Copy_u8Sense)
     ade:	8b 81       	ldd	r24, Y+3	; 0x03
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	79 f4       	brne	.+30     	; 0xb02 <EXTI_u8SetSenseControl+0x142>
		{
			CLR_BIT(MCUCR,MCUCR_ISC10);
     ae4:	a5 e5       	ldi	r26, 0x55	; 85
     ae6:	b0 e0       	ldi	r27, 0x00	; 0
     ae8:	e5 e5       	ldi	r30, 0x55	; 85
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	80 81       	ld	r24, Z
     aee:	8b 7f       	andi	r24, 0xFB	; 251
     af0:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
     af2:	a5 e5       	ldi	r26, 0x55	; 85
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e5 e5       	ldi	r30, 0x55	; 85
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	80 81       	ld	r24, Z
     afc:	88 60       	ori	r24, 0x08	; 8
     afe:	8c 93       	st	X, r24
     b00:	2d c0       	rjmp	.+90     	; 0xb5c <EXTI_u8SetSenseControl+0x19c>
		}
		else if(EXTI_u8_RISING_EDGE == Copy_u8Sense)
     b02:	8b 81       	ldd	r24, Y+3	; 0x03
     b04:	81 30       	cpi	r24, 0x01	; 1
     b06:	79 f4       	brne	.+30     	; 0xb26 <EXTI_u8SetSenseControl+0x166>
		{
			SET_BIT(MCUCR,MCUCR_ISC10);
     b08:	a5 e5       	ldi	r26, 0x55	; 85
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	e5 e5       	ldi	r30, 0x55	; 85
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	80 81       	ld	r24, Z
     b12:	84 60       	ori	r24, 0x04	; 4
     b14:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
     b16:	a5 e5       	ldi	r26, 0x55	; 85
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	e5 e5       	ldi	r30, 0x55	; 85
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	80 81       	ld	r24, Z
     b20:	88 60       	ori	r24, 0x08	; 8
     b22:	8c 93       	st	X, r24
     b24:	1b c0       	rjmp	.+54     	; 0xb5c <EXTI_u8SetSenseControl+0x19c>
		}
		else
		{
			Local_u8ErrorSate = NOK;
     b26:	19 82       	std	Y+1, r1	; 0x01
     b28:	19 c0       	rjmp	.+50     	; 0xb5c <EXTI_u8SetSenseControl+0x19c>

		break;

		/*Set INT2 required Sense control*/
	case EXTI_u8_INT2:
		if(EXTI_u8_FALLING_EDGE == Copy_u8Sense)
     b2a:	8b 81       	ldd	r24, Y+3	; 0x03
     b2c:	82 30       	cpi	r24, 0x02	; 2
     b2e:	41 f4       	brne	.+16     	; 0xb40 <EXTI_u8SetSenseControl+0x180>
		{
			CLR_BIT(MCUCSR,MCUCSR_ISC2);
     b30:	a4 e5       	ldi	r26, 0x54	; 84
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	e4 e5       	ldi	r30, 0x54	; 84
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	80 81       	ld	r24, Z
     b3a:	8f 7b       	andi	r24, 0xBF	; 191
     b3c:	8c 93       	st	X, r24
     b3e:	0e c0       	rjmp	.+28     	; 0xb5c <EXTI_u8SetSenseControl+0x19c>
		}
		else if(EXTI_u8_RISING_EDGE == Copy_u8Sense)
     b40:	8b 81       	ldd	r24, Y+3	; 0x03
     b42:	81 30       	cpi	r24, 0x01	; 1
     b44:	41 f4       	brne	.+16     	; 0xb56 <EXTI_u8SetSenseControl+0x196>
		{
			SET_BIT(MCUCSR,MCUCSR_ISC2);
     b46:	a4 e5       	ldi	r26, 0x54	; 84
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	e4 e5       	ldi	r30, 0x54	; 84
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	80 64       	ori	r24, 0x40	; 64
     b52:	8c 93       	st	X, r24
     b54:	03 c0       	rjmp	.+6      	; 0xb5c <EXTI_u8SetSenseControl+0x19c>
		}
		else
		{
			Local_u8ErrorSate = NOK;
     b56:	19 82       	std	Y+1, r1	; 0x01
     b58:	01 c0       	rjmp	.+2      	; 0xb5c <EXTI_u8SetSenseControl+0x19c>
		}

		break;
	default: Local_u8ErrorSate = NOK; break;
     b5a:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorSate;
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
}
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	cf 91       	pop	r28
     b6a:	df 91       	pop	r29
     b6c:	08 95       	ret

00000b6e <EXTI_u8EnableInt>:

u8 EXTI_u8EnableInt(u8 Copy_u8IntNum)
{
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	00 d0       	rcall	.+0      	; 0xb74 <EXTI_u8EnableInt+0x6>
     b74:	00 d0       	rcall	.+0      	; 0xb76 <EXTI_u8EnableInt+0x8>
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorSate = OK;
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8IntNum)
     b80:	8a 81       	ldd	r24, Y+2	; 0x02
     b82:	28 2f       	mov	r18, r24
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	3c 83       	std	Y+4, r19	; 0x04
     b88:	2b 83       	std	Y+3, r18	; 0x03
     b8a:	8b 81       	ldd	r24, Y+3	; 0x03
     b8c:	9c 81       	ldd	r25, Y+4	; 0x04
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	91 05       	cpc	r25, r1
     b92:	89 f0       	breq	.+34     	; 0xbb6 <EXTI_u8EnableInt+0x48>
     b94:	2b 81       	ldd	r18, Y+3	; 0x03
     b96:	3c 81       	ldd	r19, Y+4	; 0x04
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	a1 f0       	breq	.+40     	; 0xbc6 <EXTI_u8EnableInt+0x58>
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	9c 81       	ldd	r25, Y+4	; 0x04
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	c1 f4       	brne	.+48     	; 0xbd6 <EXTI_u8EnableInt+0x68>
	{
	case EXTI_u8_INT0: SET_BIT(GICR,GICR_INT0); break;
     ba6:	ab e5       	ldi	r26, 0x5B	; 91
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	eb e5       	ldi	r30, 0x5B	; 91
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	80 64       	ori	r24, 0x40	; 64
     bb2:	8c 93       	st	X, r24
     bb4:	11 c0       	rjmp	.+34     	; 0xbd8 <EXTI_u8EnableInt+0x6a>
	case EXTI_u8_INT1: SET_BIT(GICR,GICR_INT1); break;
     bb6:	ab e5       	ldi	r26, 0x5B	; 91
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	eb e5       	ldi	r30, 0x5B	; 91
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	80 68       	ori	r24, 0x80	; 128
     bc2:	8c 93       	st	X, r24
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <EXTI_u8EnableInt+0x6a>
	case EXTI_u8_INT2: SET_BIT(GICR,GICR_INT2); break;
     bc6:	ab e5       	ldi	r26, 0x5B	; 91
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	eb e5       	ldi	r30, 0x5B	; 91
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	80 62       	ori	r24, 0x20	; 32
     bd2:	8c 93       	st	X, r24
     bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <EXTI_u8EnableInt+0x6a>
	default: Local_u8ErrorSate = NOK; break;
     bd6:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorSate;
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
}
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	cf 91       	pop	r28
     be4:	df 91       	pop	r29
     be6:	08 95       	ret

00000be8 <EXTI_u8DisableInt>:
u8 EXTI_u8DisableInt(u8 Copy_u8IntNum)
{
     be8:	df 93       	push	r29
     bea:	cf 93       	push	r28
     bec:	00 d0       	rcall	.+0      	; 0xbee <EXTI_u8DisableInt+0x6>
     bee:	00 d0       	rcall	.+0      	; 0xbf0 <EXTI_u8DisableInt+0x8>
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorSate = OK;
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8IntNum)
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	28 2f       	mov	r18, r24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	3c 83       	std	Y+4, r19	; 0x04
     c02:	2b 83       	std	Y+3, r18	; 0x03
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	9c 81       	ldd	r25, Y+4	; 0x04
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	91 05       	cpc	r25, r1
     c0c:	89 f0       	breq	.+34     	; 0xc30 <EXTI_u8DisableInt+0x48>
     c0e:	2b 81       	ldd	r18, Y+3	; 0x03
     c10:	3c 81       	ldd	r19, Y+4	; 0x04
     c12:	22 30       	cpi	r18, 0x02	; 2
     c14:	31 05       	cpc	r19, r1
     c16:	a1 f0       	breq	.+40     	; 0xc40 <EXTI_u8DisableInt+0x58>
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	9c 81       	ldd	r25, Y+4	; 0x04
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	c1 f4       	brne	.+48     	; 0xc50 <EXTI_u8DisableInt+0x68>
	{
	case EXTI_u8_INT0: CLR_BIT(GICR,GICR_INT0); break;
     c20:	ab e5       	ldi	r26, 0x5B	; 91
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	eb e5       	ldi	r30, 0x5B	; 91
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	8f 7b       	andi	r24, 0xBF	; 191
     c2c:	8c 93       	st	X, r24
     c2e:	11 c0       	rjmp	.+34     	; 0xc52 <EXTI_u8DisableInt+0x6a>
	case EXTI_u8_INT1: CLR_BIT(GICR,GICR_INT1); break;
     c30:	ab e5       	ldi	r26, 0x5B	; 91
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	eb e5       	ldi	r30, 0x5B	; 91
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	8f 77       	andi	r24, 0x7F	; 127
     c3c:	8c 93       	st	X, r24
     c3e:	09 c0       	rjmp	.+18     	; 0xc52 <EXTI_u8DisableInt+0x6a>
	case EXTI_u8_INT2: CLR_BIT(GICR,GICR_INT2); break;
     c40:	ab e5       	ldi	r26, 0x5B	; 91
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	eb e5       	ldi	r30, 0x5B	; 91
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	8f 7d       	andi	r24, 0xDF	; 223
     c4c:	8c 93       	st	X, r24
     c4e:	01 c0       	rjmp	.+2      	; 0xc52 <EXTI_u8DisableInt+0x6a>
	default: Local_u8ErrorSate = NOK; break;
     c50:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorSate;
     c52:	89 81       	ldd	r24, Y+1	; 0x01
}
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	08 95       	ret

00000c62 <EXTI_u8SetCallBack>:

/*************************************CallBack Function************************************************/
u8 EXTI_u8SetCallBack(void (*Copy_pvCallBack)(void),u8 Copy_u8IntNum)
{
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	00 d0       	rcall	.+0      	; 0xc68 <EXTI_u8SetCallBack+0x6>
     c68:	00 d0       	rcall	.+0      	; 0xc6a <EXTI_u8SetCallBack+0x8>
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	9b 83       	std	Y+3, r25	; 0x03
     c70:	8a 83       	std	Y+2, r24	; 0x02
     c72:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState =OK;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pvCallBack !=NULL)
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	9b 81       	ldd	r25, Y+3	; 0x03
     c7c:	00 97       	sbiw	r24, 0x00	; 0
     c7e:	69 f0       	breq	.+26     	; 0xc9a <EXTI_u8SetCallBack+0x38>
	{
		EXTI_pvCallBackFunc[Copy_u8IntNum] =Copy_pvCallBack;
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	88 2f       	mov	r24, r24
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	fc 01       	movw	r30, r24
     c8c:	ee 59       	subi	r30, 0x9E	; 158
     c8e:	ff 4f       	sbci	r31, 0xFF	; 255
     c90:	8a 81       	ldd	r24, Y+2	; 0x02
     c92:	9b 81       	ldd	r25, Y+3	; 0x03
     c94:	91 83       	std	Z+1, r25	; 0x01
     c96:	80 83       	st	Z, r24
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <EXTI_u8SetCallBack+0x3c>
	}
	else
	{
		Local_u8ErrorState =NULL_POINTER;
     c9a:	82 e0       	ldi	r24, 0x02	; 2
     c9c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
}
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <__vector_1>:
/*************************************************INT0*****************************************/
void __vector_1 (void) 		__attribute__((signal));
void __vector_1 (void)
{
     cae:	1f 92       	push	r1
     cb0:	0f 92       	push	r0
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	0f 92       	push	r0
     cb6:	11 24       	eor	r1, r1
     cb8:	2f 93       	push	r18
     cba:	3f 93       	push	r19
     cbc:	4f 93       	push	r20
     cbe:	5f 93       	push	r21
     cc0:	6f 93       	push	r22
     cc2:	7f 93       	push	r23
     cc4:	8f 93       	push	r24
     cc6:	9f 93       	push	r25
     cc8:	af 93       	push	r26
     cca:	bf 93       	push	r27
     ccc:	ef 93       	push	r30
     cce:	ff 93       	push	r31
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvCallBackFunc[EXTI_u8_INT0] != NULL)
     cd8:	80 91 62 00 	lds	r24, 0x0062
     cdc:	90 91 63 00 	lds	r25, 0x0063
     ce0:	00 97       	sbiw	r24, 0x00	; 0
     ce2:	29 f0       	breq	.+10     	; 0xcee <__vector_1+0x40>
	{
		/*Invoke the call back function*/
		EXTI_pvCallBackFunc[EXTI_u8_INT0]();
     ce4:	e0 91 62 00 	lds	r30, 0x0062
     ce8:	f0 91 63 00 	lds	r31, 0x0063
     cec:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
     cee:	cf 91       	pop	r28
     cf0:	df 91       	pop	r29
     cf2:	ff 91       	pop	r31
     cf4:	ef 91       	pop	r30
     cf6:	bf 91       	pop	r27
     cf8:	af 91       	pop	r26
     cfa:	9f 91       	pop	r25
     cfc:	8f 91       	pop	r24
     cfe:	7f 91       	pop	r23
     d00:	6f 91       	pop	r22
     d02:	5f 91       	pop	r21
     d04:	4f 91       	pop	r20
     d06:	3f 91       	pop	r19
     d08:	2f 91       	pop	r18
     d0a:	0f 90       	pop	r0
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	0f 90       	pop	r0
     d10:	1f 90       	pop	r1
     d12:	18 95       	reti

00000d14 <__vector_2>:
/*************************************************INT1*****************************************/
void __vector_2 (void) 		__attribute__((signal));
void __vector_2 (void)
{
     d14:	1f 92       	push	r1
     d16:	0f 92       	push	r0
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	0f 92       	push	r0
     d1c:	11 24       	eor	r1, r1
     d1e:	2f 93       	push	r18
     d20:	3f 93       	push	r19
     d22:	4f 93       	push	r20
     d24:	5f 93       	push	r21
     d26:	6f 93       	push	r22
     d28:	7f 93       	push	r23
     d2a:	8f 93       	push	r24
     d2c:	9f 93       	push	r25
     d2e:	af 93       	push	r26
     d30:	bf 93       	push	r27
     d32:	ef 93       	push	r30
     d34:	ff 93       	push	r31
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvCallBackFunc[EXTI_u8_INT1] != NULL)
     d3e:	80 91 64 00 	lds	r24, 0x0064
     d42:	90 91 65 00 	lds	r25, 0x0065
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	29 f0       	breq	.+10     	; 0xd54 <__vector_2+0x40>
	{
		/*Invoke the call back function*/
		EXTI_pvCallBackFunc[EXTI_u8_INT1]();
     d4a:	e0 91 64 00 	lds	r30, 0x0064
     d4e:	f0 91 65 00 	lds	r31, 0x0065
     d52:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	ff 91       	pop	r31
     d5a:	ef 91       	pop	r30
     d5c:	bf 91       	pop	r27
     d5e:	af 91       	pop	r26
     d60:	9f 91       	pop	r25
     d62:	8f 91       	pop	r24
     d64:	7f 91       	pop	r23
     d66:	6f 91       	pop	r22
     d68:	5f 91       	pop	r21
     d6a:	4f 91       	pop	r20
     d6c:	3f 91       	pop	r19
     d6e:	2f 91       	pop	r18
     d70:	0f 90       	pop	r0
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	0f 90       	pop	r0
     d76:	1f 90       	pop	r1
     d78:	18 95       	reti

00000d7a <__vector_3>:
/*************************************************INT2*****************************************/
void __vector_3 (void) 		__attribute__((signal));
void __vector_3 (void)
{
     d7a:	1f 92       	push	r1
     d7c:	0f 92       	push	r0
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	0f 92       	push	r0
     d82:	11 24       	eor	r1, r1
     d84:	2f 93       	push	r18
     d86:	3f 93       	push	r19
     d88:	4f 93       	push	r20
     d8a:	5f 93       	push	r21
     d8c:	6f 93       	push	r22
     d8e:	7f 93       	push	r23
     d90:	8f 93       	push	r24
     d92:	9f 93       	push	r25
     d94:	af 93       	push	r26
     d96:	bf 93       	push	r27
     d98:	ef 93       	push	r30
     d9a:	ff 93       	push	r31
     d9c:	df 93       	push	r29
     d9e:	cf 93       	push	r28
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvCallBackFunc[EXTI_u8_INT2] != NULL)
     da4:	80 91 66 00 	lds	r24, 0x0066
     da8:	90 91 67 00 	lds	r25, 0x0067
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	29 f0       	breq	.+10     	; 0xdba <__vector_3+0x40>
	{
		/*Invoke the call back function*/
		EXTI_pvCallBackFunc[EXTI_u8_INT2]();
     db0:	e0 91 66 00 	lds	r30, 0x0066
     db4:	f0 91 67 00 	lds	r31, 0x0067
     db8:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	ff 91       	pop	r31
     dc0:	ef 91       	pop	r30
     dc2:	bf 91       	pop	r27
     dc4:	af 91       	pop	r26
     dc6:	9f 91       	pop	r25
     dc8:	8f 91       	pop	r24
     dca:	7f 91       	pop	r23
     dcc:	6f 91       	pop	r22
     dce:	5f 91       	pop	r21
     dd0:	4f 91       	pop	r20
     dd2:	3f 91       	pop	r19
     dd4:	2f 91       	pop	r18
     dd6:	0f 90       	pop	r0
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	0f 90       	pop	r0
     ddc:	1f 90       	pop	r1
     dde:	18 95       	reti

00000de0 <GIE_voidEnableGlobal>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnableGlobal(void)
{
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
	/*1- By C language*/
	SET_BIT(SREG,SREG_I);			
     de8:	af e5       	ldi	r26, 0x5F	; 95
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	ef e5       	ldi	r30, 0x5F	; 95
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	80 68       	ori	r24, 0x80	; 128
     df4:	8c 93       	st	X, r24
	
	/*2- By assembly*/
	/*  __asm volatile("SEI");  */
}
     df6:	cf 91       	pop	r28
     df8:	df 91       	pop	r29
     dfa:	08 95       	ret

00000dfc <GIE_voidDisableGlobal>:

void GIE_voidDisableGlobal(void)
{
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
	/*1- By C language*/
	CLR_BIT(SREG,SREG_I);
     e04:	af e5       	ldi	r26, 0x5F	; 95
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	ef e5       	ldi	r30, 0x5F	; 95
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	8f 77       	andi	r24, 0x7F	; 127
     e10:	8c 93       	st	X, r24
	
	/*2- By assembly*/
	/*  __asm volatile("CLI");  */
}
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
     e20:	ea e3       	ldi	r30, 0x3A	; 58
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	10 82       	st	Z, r1
	DDRB = PORTB_DIR;
     e26:	e7 e3       	ldi	r30, 0x37	; 55
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 e4       	ldi	r24, 0x40	; 64
     e2c:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
     e2e:	e4 e3       	ldi	r30, 0x34	; 52
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
     e34:	e1 e3       	ldi	r30, 0x31	; 49
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	10 82       	st	Z, r1

	PORTA = PORTA_INITIAL_VALUE;
     e3a:	eb e3       	ldi	r30, 0x3B	; 59
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
     e40:	e8 e3       	ldi	r30, 0x38	; 56
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
     e46:	e5 e3       	ldi	r30, 0x35	; 53
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
     e4c:	e2 e3       	ldi	r30, 0x32	; 50
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	10 82       	st	Z, r1
}
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <SPI_voidInitialize>:
#include "SPI_private.h"
#include "SPI_interface.h"
#include "DIO_interface.h"

void SPI_voidInitialize(u8 Copy_u8Role)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	0f 92       	push	r0
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	89 83       	std	Y+1, r24	; 0x01
#if SPI_u8_DATA_ORDER == SPI_u8_MSB_FIRST
	CLR_BIT(SPCR,SPCR_DORD);
     e64:	ad e2       	ldi	r26, 0x2D	; 45
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	ed e2       	ldi	r30, 0x2D	; 45
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	8f 7d       	andi	r24, 0xDF	; 223
     e70:	8c 93       	st	X, r24
#elif SPI_u8_DATA_ORDER == SPI_u8_LSB_FIRST
	SETBIT(SPCR,SPCR_DORD);
#endif

if (Copy_u8Role == SPI_u8_MASTER)
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	41 f4       	brne	.+16     	; 0xe88 <SPI_voidInitialize+0x30>
{
	SET_BIT(SPCR,SPCR_MSTR);
     e78:	ad e2       	ldi	r26, 0x2D	; 45
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	ed e2       	ldi	r30, 0x2D	; 45
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	80 61       	ori	r24, 0x10	; 16
     e84:	8c 93       	st	X, r24
     e86:	0a c0       	rjmp	.+20     	; 0xe9c <SPI_voidInitialize+0x44>

}
else if( Copy_u8Role == SPI_u8_SLAVE)
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	82 30       	cpi	r24, 0x02	; 2
     e8c:	39 f4       	brne	.+14     	; 0xe9c <SPI_voidInitialize+0x44>
{
	CLR_BIT(SPCR,SPCR_MSTR);
     e8e:	ad e2       	ldi	r26, 0x2D	; 45
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	ed e2       	ldi	r30, 0x2D	; 45
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	8f 7e       	andi	r24, 0xEF	; 239
     e9a:	8c 93       	st	X, r24

}

#if SPI_u8_CLOCK_POLARITY == SPI_u8_LEADING_RISING
	CLR_BIT(SPCR,SPCR_CPOL);
     e9c:	ad e2       	ldi	r26, 0x2D	; 45
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	ed e2       	ldi	r30, 0x2D	; 45
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	87 7f       	andi	r24, 0xF7	; 247
     ea8:	8c 93       	st	X, r24
#elif SPI_u8_CLOCK_POLARITY == SPI_u8_LEADING_FALLING
	SET_BIT(SPCR,SPCR_CPOL);
#endif

#if SPI_u8_CLOCK_PHASE == SPI_u8_LEADING_SAMPLE
	CLR_BIT(SPCR,SPCR_CPHA);
     eaa:	ad e2       	ldi	r26, 0x2D	; 45
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	ed e2       	ldi	r30, 0x2D	; 45
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8b 7f       	andi	r24, 0xFB	; 251
     eb6:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_CPHA);
#endif


	 /* Enable SPI Pripheral*/
	SET_BIT(SPCR,SPCR_SPE);
     eb8:	ad e2       	ldi	r26, 0x2D	; 45
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	ed e2       	ldi	r30, 0x2D	; 45
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	80 64       	ori	r24, 0x40	; 64
     ec4:	8c 93       	st	X, r24
}
     ec6:	0f 90       	pop	r0
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <SPI_u8Transiver>:

u8 SPI_u8Transiver(u8 Copy_u8Data)
{
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	0f 92       	push	r0
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	89 83       	std	Y+1, r24	; 0x01
	SPDR=Copy_u8Data;
     eda:	ef e2       	ldi	r30, 0x2F	; 47
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	80 83       	st	Z, r24
	while((GET_BIT(SPSR,SPSR_SPIF)==0));
     ee2:	ee e2       	ldi	r30, 0x2E	; 46
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	88 23       	and	r24, r24
     eea:	dc f7       	brge	.-10     	; 0xee2 <SPI_u8Transiver+0x14>
	return SPDR;
     eec:	ef e2       	ldi	r30, 0x2F	; 47
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
}
     ef2:	0f 90       	pop	r0
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <Timer0_voidInit>:
u32 volatile ThirdTime=0;

u8 volatile Flag=0; //to indicate how many times we entered external interrupt

void Timer0_voidInit(void)
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
	/*normal mode setting*/
	CLR_BIT(TCCR0, TCCR0_WGM00);
     f02:	a3 e5       	ldi	r26, 0x53	; 83
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e3 e5       	ldi	r30, 0x53	; 83
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	8f 7b       	andi	r24, 0xBF	; 191
     f0e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, TCCR0_WGM01);
     f10:	a3 e5       	ldi	r26, 0x53	; 83
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e3 e5       	ldi	r30, 0x53	; 83
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	87 7f       	andi	r24, 0xF7	; 247
     f1c:	8c 93       	st	X, r24

	/*<pre>-load setting*/
	TCNT0= TIMER0_u8_PRELOAD;
     f1e:	e2 e5       	ldi	r30, 0x52	; 82
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 ec       	ldi	r24, 0xC0	; 192
     f24:	80 83       	st	Z, r24

	/*overflow interrupt enable*/
	SET_BIT(TIMSK, TIMSK_TOIE0);
     f26:	a9 e5       	ldi	r26, 0x59	; 89
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e9 e5       	ldi	r30, 0x59	; 89
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	81 60       	ori	r24, 0x01	; 1
     f32:	8c 93       	st	X, r24

	/*<pre>-scaler division*/
	TCCR0 &= PRESCALER_MASK;
     f34:	a3 e5       	ldi	r26, 0x53	; 83
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e3 e5       	ldi	r30, 0x53	; 83
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	88 7f       	andi	r24, 0xF8	; 248
     f40:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_u8_PRESCALER;
     f42:	a3 e5       	ldi	r26, 0x53	; 83
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e3 e5       	ldi	r30, 0x53	; 83
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	82 60       	ori	r24, 0x02	; 2
     f4e:	8c 93       	st	X, r24
}
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <Timer0_voidSetPreloadValue>:

void Timer0_voidSetPreloadValue(u8 Copy_u8PreloadValue)
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	0f 92       	push	r0
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	89 83       	std	Y+1, r24	; 0x01
	TCCR0= Copy_u8PreloadValue;
     f62:	e3 e5       	ldi	r30, 0x53	; 83
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	80 83       	st	Z, r24
}
     f6a:	0f 90       	pop	r0
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <Timer0_u8ovSetCallback>:

u8 Timer0_u8ovSetCallback(void (*Copy_pvCallBackFunc)(void))
{
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	00 d0       	rcall	.+0      	; 0xf78 <Timer0_u8ovSetCallback+0x6>
     f78:	0f 92       	push	r0
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	9b 83       	std	Y+3, r25	; 0x03
     f80:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState =OK;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackFunc !=NULL)
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	9b 81       	ldd	r25, Y+3	; 0x03
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	39 f0       	breq	.+14     	; 0xf9c <Timer0_u8ovSetCallback+0x2a>
	{
		TIMER_pvCallBackFunc=Copy_pvCallBackFunc;
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	9b 81       	ldd	r25, Y+3	; 0x03
     f92:	90 93 69 00 	sts	0x0069, r25
     f96:	80 93 68 00 	sts	0x0068, r24
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <Timer0_u8ovSetCallback+0x2e>
	}
	else
	{
		Local_u8ErrorState =NULL_POINTER;
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <__vector_11>:

void __vector_11 (void)  __attribute__((signal));
void __vector_11 (void)
{
     fae:	1f 92       	push	r1
     fb0:	0f 92       	push	r0
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	0f 92       	push	r0
     fb6:	11 24       	eor	r1, r1
     fb8:	2f 93       	push	r18
     fba:	3f 93       	push	r19
     fbc:	4f 93       	push	r20
     fbe:	5f 93       	push	r21
     fc0:	6f 93       	push	r22
     fc2:	7f 93       	push	r23
     fc4:	8f 93       	push	r24
     fc6:	9f 93       	push	r25
     fc8:	af 93       	push	r26
     fca:	bf 93       	push	r27
     fcc:	ef 93       	push	r30
     fce:	ff 93       	push	r31
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_pvCallBackFunc != NULL)
     fd8:	80 91 68 00 	lds	r24, 0x0068
     fdc:	90 91 69 00 	lds	r25, 0x0069
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	29 f0       	breq	.+10     	; 0xfee <__vector_11+0x40>
	{
		TIMER_pvCallBackFunc();
     fe4:	e0 91 68 00 	lds	r30, 0x0068
     fe8:	f0 91 69 00 	lds	r31, 0x0069
     fec:	09 95       	icall
	}
	else
	{
		//Do Nothing
	}
}
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	ff 91       	pop	r31
     ff4:	ef 91       	pop	r30
     ff6:	bf 91       	pop	r27
     ff8:	af 91       	pop	r26
     ffa:	9f 91       	pop	r25
     ffc:	8f 91       	pop	r24
     ffe:	7f 91       	pop	r23
    1000:	6f 91       	pop	r22
    1002:	5f 91       	pop	r21
    1004:	4f 91       	pop	r20
    1006:	3f 91       	pop	r19
    1008:	2f 91       	pop	r18
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	0f 90       	pop	r0
    1010:	1f 90       	pop	r1
    1012:	18 95       	reti

00001014 <Timer1_voidInit>:

void Timer1_voidInit(void)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62

	/*Clear OC1A/OC1B on compare match, set
	OC1A/OC1B at TOP*/
	CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    101c:	af e4       	ldi	r26, 0x4F	; 79
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	ef e4       	ldi	r30, 0x4F	; 79
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	8f 7b       	andi	r24, 0xBF	; 191
    1028:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, TCCR1A_COM1A1);
    102a:	af e4       	ldi	r26, 0x4F	; 79
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	ef e4       	ldi	r30, 0x4F	; 79
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	80 68       	ori	r24, 0x80	; 128
    1036:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, TCCR1B_WGM12);
    1038:	ae e4       	ldi	r26, 0x4E	; 78
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	ee e4       	ldi	r30, 0x4E	; 78
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	88 60       	ori	r24, 0x08	; 8
    1044:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, TCCR1B_WGM13);
    1046:	ae e4       	ldi	r26, 0x4E	; 78
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	ee e4       	ldi	r30, 0x4E	; 78
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	80 61       	ori	r24, 0x10	; 16
    1052:	8c 93       	st	X, r24

	/*Fast PWM*/
	CLR_BIT(TCCR1A, TCCR1A_WGM10);
    1054:	af e4       	ldi	r26, 0x4F	; 79
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	ef e4       	ldi	r30, 0x4F	; 79
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	8e 7f       	andi	r24, 0xFE	; 254
    1060:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, TCCR1A_WGM11);
    1062:	af e4       	ldi	r26, 0x4F	; 79
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	ef e4       	ldi	r30, 0x4F	; 79
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	82 60       	ori	r24, 0x02	; 2
    106e:	8c 93       	st	X, r24
	/*<pre>-scaler  CLk/8*/
	/*CLR_BIT(TCCR1B, TCCR1B_CS10);
	SET_BIT(TCCR1B, TCCR1B_CS11);
	CLR_BIT(TCCR1B, TCCR1B_CS12);*/

	TCCR1B &= PRESCALER_MASK;
    1070:	ae e4       	ldi	r26, 0x4E	; 78
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	ee e4       	ldi	r30, 0x4E	; 78
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	88 7f       	andi	r24, 0xF8	; 248
    107c:	8c 93       	st	X, r24
	TCCR1B |= TIMER0_u8_PRESCALER;
    107e:	ae e4       	ldi	r26, 0x4E	; 78
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	ee e4       	ldi	r30, 0x4E	; 78
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	82 60       	ori	r24, 0x02	; 2
    108a:	8c 93       	st	X, r24

	/*Set top value*/
	ICR1=65000;
    108c:	e6 e4       	ldi	r30, 0x46	; 70
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	88 ee       	ldi	r24, 0xE8	; 232
    1092:	9d ef       	ldi	r25, 0xFD	; 253
    1094:	91 83       	std	Z+1, r25	; 0x01
    1096:	80 83       	st	Z, r24
}
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <Timer1_voidInitNormalMode>:

void Timer1_voidInitNormalMode(void)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62

	/*Normal Mode*/
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    10a6:	af e4       	ldi	r26, 0x4F	; 79
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	ef e4       	ldi	r30, 0x4F	; 79
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	8e 7f       	andi	r24, 0xFE	; 254
    10b2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_WGM11);
    10b4:	af e4       	ldi	r26, 0x4F	; 79
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	ef e4       	ldi	r30, 0x4F	; 79
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8d 7f       	andi	r24, 0xFD	; 253
    10c0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM12);
    10c2:	ae e4       	ldi	r26, 0x4E	; 78
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	ee e4       	ldi	r30, 0x4E	; 78
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	87 7f       	andi	r24, 0xF7	; 247
    10ce:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM13);
    10d0:	ae e4       	ldi	r26, 0x4E	; 78
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	ee e4       	ldi	r30, 0x4E	; 78
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	8f 7e       	andi	r24, 0xEF	; 239
    10dc:	8c 93       	st	X, r24
	/*<pre>-scaler  CLk/8*/
	/*CLR_BIT(TCCR1B, TCCR1B_CS10);
	SET_BIT(TCCR1B, TCCR1B_CS11);
	CLR_BIT(TCCR1B, TCCR1B_CS12);*/

	TCCR1B &= PRESCALER_MASK;
    10de:	ae e4       	ldi	r26, 0x4E	; 78
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	ee e4       	ldi	r30, 0x4E	; 78
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	88 7f       	andi	r24, 0xF8	; 248
    10ea:	8c 93       	st	X, r24
	TCCR1B |= TIMER0_u8_PRESCALER;
    10ec:	ae e4       	ldi	r26, 0x4E	; 78
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	ee e4       	ldi	r30, 0x4E	; 78
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	82 60       	ori	r24, 0x02	; 2
    10f8:	8c 93       	st	X, r24
}
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <Timer1_voidSetCompareValue>:

void Timer1_voidSetCompareValue(u16 Copy_u8CompareValue)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	00 d0       	rcall	.+0      	; 0x1106 <Timer1_voidSetCompareValue+0x6>
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	9a 83       	std	Y+2, r25	; 0x02
    110c:	89 83       	std	Y+1, r24	; 0x01
	OCR1A= Copy_u8CompareValue;
    110e:	ea e4       	ldi	r30, 0x4A	; 74
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	9a 81       	ldd	r25, Y+2	; 0x02
    1116:	91 83       	std	Z+1, r25	; 0x01
    1118:	80 83       	st	Z, r24
}
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <__vector_9>:
/**********************************************************/

/*timer1 overflow*/
void __vector_9 (void)  __attribute__((signal));
void __vector_9 (void)
{
    1124:	1f 92       	push	r1
    1126:	0f 92       	push	r0
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	0f 92       	push	r0
    112c:	11 24       	eor	r1, r1
    112e:	8f 93       	push	r24
    1130:	9f 93       	push	r25
    1132:	af 93       	push	r26
    1134:	bf 93       	push	r27
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
	/*determine how many time the ICR1 overflow*/
	Counter ++;
    113e:	80 91 6a 00 	lds	r24, 0x006A
    1142:	90 91 6b 00 	lds	r25, 0x006B
    1146:	a0 91 6c 00 	lds	r26, 0x006C
    114a:	b0 91 6d 00 	lds	r27, 0x006D
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	a1 1d       	adc	r26, r1
    1152:	b1 1d       	adc	r27, r1
    1154:	80 93 6a 00 	sts	0x006A, r24
    1158:	90 93 6b 00 	sts	0x006B, r25
    115c:	a0 93 6c 00 	sts	0x006C, r26
    1160:	b0 93 6d 00 	sts	0x006D, r27
}
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	bf 91       	pop	r27
    116a:	af 91       	pop	r26
    116c:	9f 91       	pop	r25
    116e:	8f 91       	pop	r24
    1170:	0f 90       	pop	r0
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	0f 90       	pop	r0
    1176:	1f 90       	pop	r1
    1178:	18 95       	reti

0000117a <USART_voidInit>:
#include "UART_register.h"
#include "UART_config.h"
#include"UART_interface.h"

void USART_voidInit (void)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
	/*select 8-bit data*/
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
    1182:	aa e2       	ldi	r26, 0x2A	; 42
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	ea e2       	ldi	r30, 0x2A	; 42
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	8b 7f       	andi	r24, 0xFB	; 251
    118e:	8c 93       	st	X, r24

	UCSRC =0b10000110;
    1190:	e0 e4       	ldi	r30, 0x40	; 64
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	86 e8       	ldi	r24, 0x86	; 134
    1196:	80 83       	st	Z, r24


	/* 9600 bps*/
	UBRRL =51;
    1198:	e9 e2       	ldi	r30, 0x29	; 41
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	83 e3       	ldi	r24, 0x33	; 51
    119e:	80 83       	st	Z, r24


	/*receiver enable*/
	SET_BIT(UCSRB,UCSRB_RXEN);
    11a0:	aa e2       	ldi	r26, 0x2A	; 42
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	ea e2       	ldi	r30, 0x2A	; 42
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	80 61       	ori	r24, 0x10	; 16
    11ac:	8c 93       	st	X, r24

	/*transmit enable*/
	SET_BIT(UCSRB,UCSRB_TXEN);
    11ae:	aa e2       	ldi	r26, 0x2A	; 42
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	ea e2       	ldi	r30, 0x2A	; 42
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	88 60       	ori	r24, 0x08	; 8
    11ba:	8c 93       	st	X, r24
}
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <UART_SendString>:

void UART_SendString(char *str)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <UART_SendString+0x6>
    11c8:	0f 92       	push	r0
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	9b 83       	std	Y+3, r25	; 0x03
    11d0:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char j=0;
    11d2:	19 82       	std	Y+1, r1	; 0x01
    11d4:	0e c0       	rjmp	.+28     	; 0x11f2 <UART_SendString+0x30>

	while (str[j]!=0)		/* Send string till null */
	{
		USART_voidSendData(str[j]);
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	9b 81       	ldd	r25, Y+3	; 0x03
    11e0:	fc 01       	movw	r30, r24
    11e2:	e2 0f       	add	r30, r18
    11e4:	f3 1f       	adc	r31, r19
    11e6:	80 81       	ld	r24, Z
    11e8:	0e 94 0a 09 	call	0x1214	; 0x1214 <USART_voidSendData>
		j++;
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	8f 5f       	subi	r24, 0xFF	; 255
    11f0:	89 83       	std	Y+1, r24	; 0x01

void UART_SendString(char *str)
{
	unsigned char j=0;

	while (str[j]!=0)		/* Send string till null */
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	9b 81       	ldd	r25, Y+3	; 0x03
    11fc:	fc 01       	movw	r30, r24
    11fe:	e2 0f       	add	r30, r18
    1200:	f3 1f       	adc	r31, r19
    1202:	80 81       	ld	r24, Z
    1204:	88 23       	and	r24, r24
    1206:	39 f7       	brne	.-50     	; 0x11d6 <UART_SendString+0x14>
	{
		USART_voidSendData(str[j]);
		j++;
	}
}
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <USART_voidSendData>:

void USART_voidSendData(u8 Copy_u8Data)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	0f 92       	push	r0
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	89 83       	std	Y+1, r24	; 0x01
	/*1-Wait until data register is empty*/
	while (GET_BIT(UCSRA, UCSRA_UDRE) == 0);
    1220:	eb e2       	ldi	r30, 0x2B	; 43
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	82 95       	swap	r24
    1228:	86 95       	lsr	r24
    122a:	87 70       	andi	r24, 0x07	; 7
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	81 70       	andi	r24, 0x01	; 1
    1232:	90 70       	andi	r25, 0x00	; 0
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	a1 f3       	breq	.-24     	; 0x1220 <USART_voidSendData+0xc>

	/*2- Write the data to the UDR register*/
	UDR = Copy_u8Data;
    1238:	ec e2       	ldi	r30, 0x2C	; 44
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	80 83       	st	Z, r24
}
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <USART_voidReceiveData>:

u8 USART_voidReceiveData(void)
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
	/*1-Wait until new Data is received*/
	while (GET_BIT(UCSRA, UCSRA_RXC) == 0);
    1250:	eb e2       	ldi	r30, 0x2B	; 43
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	88 23       	and	r24, r24
    1258:	dc f7       	brge	.-10     	; 0x1250 <USART_voidReceiveData+0x8>

	/*2- Return the Received data*/
	return UDR;
    125a:	ec e2       	ldi	r30, 0x2C	; 44
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
}
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <main>:

#include "CommunicationLinker.h"
#include "DIO_interface.h"
#include "ACTUATOR_interface.h"
#include "STD_TYPES.h"
int main() {
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	00 d0       	rcall	.+0      	; 0x126c <main+0x6>
    126c:	00 d0       	rcall	.+0      	; 0x126e <main+0x8>
    126e:	0f 92       	push	r0
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Local variable to store the upcoming data
	 */
	u8 data = 0;
    1274:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Init Port Module
	 */
	PORT_voidInit();
    1276:	0e 94 0c 07 	call	0xe18	; 0xe18 <PORT_voidInit>

	/*
	 * Init the CommunicationLinker Module as Slave MC
	 */
	Comm_Init(COMM_SLAVE_MODE);
    127a:	82 e0       	ldi	r24, 0x02	; 2
    127c:	0e 94 a3 00 	call	0x146	; 0x146 <Comm_Init>
	/*
	 * Set Actuator Config Struct
	 */
	Actuator_ConfigType ActuatorsChannels = {
	DIO_u8_PORTA, DIO_u8_PIN6,
	DIO_u8_PORTA, DIO_u8_PIN7 };
    1280:	1a 82       	std	Y+2, r1	; 0x02
    1282:	86 e0       	ldi	r24, 0x06	; 6
    1284:	8b 83       	std	Y+3, r24	; 0x03
    1286:	1c 82       	std	Y+4, r1	; 0x04
    1288:	87 e0       	ldi	r24, 0x07	; 7
    128a:	8d 83       	std	Y+5, r24	; 0x05

	/*
	 * Init Actuator Module
	 */
	Actuator_Init(&ActuatorsChannels);
    128c:	ce 01       	movw	r24, r28
    128e:	02 96       	adiw	r24, 0x02	; 2
    1290:	0e 94 3e 00 	call	0x7c	; 0x7c <Actuator_Init>
	 */
	while (1) {
		/*
		 * Receive the data from CONTROL MC
		 */
		data = Comm_SendData(0x55);
    1294:	85 e5       	ldi	r24, 0x55	; 85
    1296:	0e 94 ba 00 	call	0x174	; 0x174 <Comm_SendData>
    129a:	89 83       	std	Y+1, r24	; 0x01
		 *     -> Actuator(1) -> ON
		 *
		 * '3' -> Actuator(0) -> ON
		 *     -> Actuator(1) -> ON
		 */
		if (data == '0') {
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	80 33       	cpi	r24, 0x30	; 48
    12a0:	49 f4       	brne	.+18     	; 0x12b4 <main+0x4e>
			Actuator_SetState(0, ACTUATOR_OFF);
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	0e 94 78 00 	call	0xf0	; 0xf0 <Actuator_SetState>
			Actuator_SetState(1, ACTUATOR_OFF);
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	0e 94 78 00 	call	0xf0	; 0xf0 <Actuator_SetState>
    12b2:	f0 cf       	rjmp	.-32     	; 0x1294 <main+0x2e>
		} else if (data == '1') {
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	81 33       	cpi	r24, 0x31	; 49
    12b8:	49 f4       	brne	.+18     	; 0x12cc <main+0x66>
			Actuator_SetState(0, ACTUATOR_ON);
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	61 e0       	ldi	r22, 0x01	; 1
    12be:	0e 94 78 00 	call	0xf0	; 0xf0 <Actuator_SetState>
			Actuator_SetState(1, ACTUATOR_OFF);
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	0e 94 78 00 	call	0xf0	; 0xf0 <Actuator_SetState>
    12ca:	e4 cf       	rjmp	.-56     	; 0x1294 <main+0x2e>
		} else if (data == '2') {
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	82 33       	cpi	r24, 0x32	; 50
    12d0:	49 f4       	brne	.+18     	; 0x12e4 <main+0x7e>
			Actuator_SetState(0, ACTUATOR_OFF);
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	0e 94 78 00 	call	0xf0	; 0xf0 <Actuator_SetState>
			Actuator_SetState(1, ACTUATOR_ON);
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	61 e0       	ldi	r22, 0x01	; 1
    12de:	0e 94 78 00 	call	0xf0	; 0xf0 <Actuator_SetState>
    12e2:	d8 cf       	rjmp	.-80     	; 0x1294 <main+0x2e>
		} else if (data == '3') {
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	83 33       	cpi	r24, 0x33	; 51
    12e8:	a9 f6       	brne	.-86     	; 0x1294 <main+0x2e>
			Actuator_SetState(0, ACTUATOR_ON);
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	61 e0       	ldi	r22, 0x01	; 1
    12ee:	0e 94 78 00 	call	0xf0	; 0xf0 <Actuator_SetState>
			Actuator_SetState(1, ACTUATOR_ON);
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	61 e0       	ldi	r22, 0x01	; 1
    12f6:	0e 94 78 00 	call	0xf0	; 0xf0 <Actuator_SetState>
    12fa:	cc cf       	rjmp	.-104    	; 0x1294 <main+0x2e>

000012fc <_exit>:
    12fc:	f8 94       	cli

000012fe <__stop_program>:
    12fe:	ff cf       	rjmp	.-2      	; 0x12fe <__stop_program>
