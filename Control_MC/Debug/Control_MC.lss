
Control_MC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001214  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000019  00800060  00800060  00001288  2**0
                  ALLOC
  2 .stab         00001d28  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a83  00000000  00000000  00002fb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__vector_1>
       8:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__vector_2>
       c:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <__vector_3>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__vector_9>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a9 37       	cpi	r26, 0x79	; 121
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <main>
      74:	0c 94 08 09 	jmp	0x1210	; 0x1210 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <BluetoothModule_Init>:

#include "UART_interface.h"
#include "BluetoothModule.h"


void BluetoothModule_Init(void){
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	cd b7       	in	r28, 0x3d	; 61
      82:	de b7       	in	r29, 0x3e	; 62
	USART_voidInit();
      84:	0e 94 7d 08 	call	0x10fa	; 0x10fa <USART_voidInit>
}
      88:	cf 91       	pop	r28
      8a:	df 91       	pop	r29
      8c:	08 95       	ret

0000008e <BluetoothModule_SendData>:

void BluetoothModule_SendData(u8 data){
      8e:	df 93       	push	r29
      90:	cf 93       	push	r28
      92:	0f 92       	push	r0
      94:	cd b7       	in	r28, 0x3d	; 61
      96:	de b7       	in	r29, 0x3e	; 62
      98:	89 83       	std	Y+1, r24	; 0x01

USART_voidSendData(data);
      9a:	89 81       	ldd	r24, Y+1	; 0x01
      9c:	0e 94 ca 08 	call	0x1194	; 0x1194 <USART_voidSendData>
}
      a0:	0f 90       	pop	r0
      a2:	cf 91       	pop	r28
      a4:	df 91       	pop	r29
      a6:	08 95       	ret

000000a8 <BluetoothModule_RecieveData>:

u8 BluetoothModule_RecieveData(void){
      a8:	df 93       	push	r29
      aa:	cf 93       	push	r28
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
return USART_voidReceiveData();
      b0:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <USART_voidReceiveData>
}
      b4:	cf 91       	pop	r28
      b6:	df 91       	pop	r29
      b8:	08 95       	ret

000000ba <Comm_Init>:

#include "CommunicationLinker.h"
#include "SPI_interface.h"


void Comm_Init(CommLinker_ControllerModes ControllerMode){
      ba:	df 93       	push	r29
      bc:	cf 93       	push	r28
      be:	0f 92       	push	r0
      c0:	cd b7       	in	r28, 0x3d	; 61
      c2:	de b7       	in	r29, 0x3e	; 62
      c4:	89 83       	std	Y+1, r24	; 0x01

	if(ControllerMode == COMM_MASTER_MODE){
      c6:	89 81       	ldd	r24, Y+1	; 0x01
      c8:	81 30       	cpi	r24, 0x01	; 1
      ca:	31 f4       	brne	.+12     	; 0xd8 <Comm_Init+0x1e>
		SPI_voidInitialize(ControllerMode);
      cc:	89 81       	ldd	r24, Y+1	; 0x01
      ce:	88 2f       	mov	r24, r24
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <SPI_voidInitialize>
      d6:	08 c0       	rjmp	.+16     	; 0xe8 <Comm_Init+0x2e>
	}
	else if(ControllerMode == COMM_SLAVE_MODE){
      d8:	89 81       	ldd	r24, Y+1	; 0x01
      da:	82 30       	cpi	r24, 0x02	; 2
      dc:	29 f4       	brne	.+10     	; 0xe8 <Comm_Init+0x2e>
		SPI_voidInitialize(ControllerMode);
      de:	89 81       	ldd	r24, Y+1	; 0x01
      e0:	88 2f       	mov	r24, r24
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <SPI_voidInitialize>
	}
	else {
		/* No Action Required */
	}

}
      e8:	0f 90       	pop	r0
      ea:	cf 91       	pop	r28
      ec:	df 91       	pop	r29
      ee:	08 95       	ret

000000f0 <Comm_SendData>:

u8 Comm_SendData(u8 data){
      f0:	df 93       	push	r29
      f2:	cf 93       	push	r28
      f4:	0f 92       	push	r0
      f6:	cd b7       	in	r28, 0x3d	; 61
      f8:	de b7       	in	r29, 0x3e	; 62
      fa:	89 83       	std	Y+1, r24	; 0x01
return SPI_u8Transiver(data);
      fc:	89 81       	ldd	r24, Y+1	; 0x01
      fe:	88 2f       	mov	r24, r24
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 27 07 	call	0xe4e	; 0xe4e <SPI_u8Transiver>
}
     106:	0f 90       	pop	r0
     108:	cf 91       	pop	r28
     10a:	df 91       	pop	r29
     10c:	08 95       	ret

0000010e <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
     10e:	df 93       	push	r29
     110:	cf 93       	push	r28
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	28 97       	sbiw	r28, 0x08	; 8
     118:	0f b6       	in	r0, 0x3f	; 63
     11a:	f8 94       	cli
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	0f be       	out	0x3f, r0	; 63
     120:	cd bf       	out	0x3d, r28	; 61
     122:	8a 83       	std	Y+2, r24	; 0x02
     124:	6b 83       	std	Y+3, r22	; 0x03
     126:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8Pin > DIO_u8_PIN7) || (Copy_u8Direction > DIO_u8_PIN_OUTPUT))
     12c:	8b 81       	ldd	r24, Y+3	; 0x03
     12e:	88 30       	cpi	r24, 0x08	; 8
     130:	18 f4       	brcc	.+6      	; 0x138 <DIO_u8SetPinDirection+0x2a>
     132:	8c 81       	ldd	r24, Y+4	; 0x04
     134:	82 30       	cpi	r24, 0x02	; 2
     136:	10 f0       	brcs	.+4      	; 0x13c <DIO_u8SetPinDirection+0x2e>
	{
		Local_u8ErrorState=NOK;
     138:	19 82       	std	Y+1, r1	; 0x01
     13a:	ee c0       	rjmp	.+476    	; 0x318 <DIO_u8SetPinDirection+0x20a>
	}
	else
	{
		if(Copy_u8Direction == DIO_u8_PIN_INPUT)
     13c:	8c 81       	ldd	r24, Y+4	; 0x04
     13e:	88 23       	and	r24, r24
     140:	09 f0       	breq	.+2      	; 0x144 <DIO_u8SetPinDirection+0x36>
     142:	76 c0       	rjmp	.+236    	; 0x230 <DIO_u8SetPinDirection+0x122>
		{
			switch(Copy_u8Port)
     144:	8a 81       	ldd	r24, Y+2	; 0x02
     146:	28 2f       	mov	r18, r24
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	38 87       	std	Y+8, r19	; 0x08
     14c:	2f 83       	std	Y+7, r18	; 0x07
     14e:	8f 81       	ldd	r24, Y+7	; 0x07
     150:	98 85       	ldd	r25, Y+8	; 0x08
     152:	81 30       	cpi	r24, 0x01	; 1
     154:	91 05       	cpc	r25, r1
     156:	59 f1       	breq	.+86     	; 0x1ae <DIO_u8SetPinDirection+0xa0>
     158:	2f 81       	ldd	r18, Y+7	; 0x07
     15a:	38 85       	ldd	r19, Y+8	; 0x08
     15c:	22 30       	cpi	r18, 0x02	; 2
     15e:	31 05       	cpc	r19, r1
     160:	2c f4       	brge	.+10     	; 0x16c <DIO_u8SetPinDirection+0x5e>
     162:	8f 81       	ldd	r24, Y+7	; 0x07
     164:	98 85       	ldd	r25, Y+8	; 0x08
     166:	00 97       	sbiw	r24, 0x00	; 0
     168:	69 f0       	breq	.+26     	; 0x184 <DIO_u8SetPinDirection+0x76>
     16a:	60 c0       	rjmp	.+192    	; 0x22c <DIO_u8SetPinDirection+0x11e>
     16c:	2f 81       	ldd	r18, Y+7	; 0x07
     16e:	38 85       	ldd	r19, Y+8	; 0x08
     170:	22 30       	cpi	r18, 0x02	; 2
     172:	31 05       	cpc	r19, r1
     174:	89 f1       	breq	.+98     	; 0x1d8 <DIO_u8SetPinDirection+0xca>
     176:	8f 81       	ldd	r24, Y+7	; 0x07
     178:	98 85       	ldd	r25, Y+8	; 0x08
     17a:	83 30       	cpi	r24, 0x03	; 3
     17c:	91 05       	cpc	r25, r1
     17e:	09 f4       	brne	.+2      	; 0x182 <DIO_u8SetPinDirection+0x74>
     180:	40 c0       	rjmp	.+128    	; 0x202 <DIO_u8SetPinDirection+0xf4>
     182:	54 c0       	rjmp	.+168    	; 0x22c <DIO_u8SetPinDirection+0x11e>
			{
			case DIO_u8_PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
     184:	aa e3       	ldi	r26, 0x3A	; 58
     186:	b0 e0       	ldi	r27, 0x00	; 0
     188:	ea e3       	ldi	r30, 0x3A	; 58
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	48 2f       	mov	r20, r24
     190:	8b 81       	ldd	r24, Y+3	; 0x03
     192:	28 2f       	mov	r18, r24
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	02 2e       	mov	r0, r18
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_u8SetPinDirection+0x94>
     19e:	88 0f       	add	r24, r24
     1a0:	99 1f       	adc	r25, r25
     1a2:	0a 94       	dec	r0
     1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_u8SetPinDirection+0x90>
     1a6:	80 95       	com	r24
     1a8:	84 23       	and	r24, r20
     1aa:	8c 93       	st	X, r24
     1ac:	b5 c0       	rjmp	.+362    	; 0x318 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8_PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
     1ae:	a7 e3       	ldi	r26, 0x37	; 55
     1b0:	b0 e0       	ldi	r27, 0x00	; 0
     1b2:	e7 e3       	ldi	r30, 0x37	; 55
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	48 2f       	mov	r20, r24
     1ba:	8b 81       	ldd	r24, Y+3	; 0x03
     1bc:	28 2f       	mov	r18, r24
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	02 2e       	mov	r0, r18
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_u8SetPinDirection+0xbe>
     1c8:	88 0f       	add	r24, r24
     1ca:	99 1f       	adc	r25, r25
     1cc:	0a 94       	dec	r0
     1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_u8SetPinDirection+0xba>
     1d0:	80 95       	com	r24
     1d2:	84 23       	and	r24, r20
     1d4:	8c 93       	st	X, r24
     1d6:	a0 c0       	rjmp	.+320    	; 0x318 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8_PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
     1d8:	a4 e3       	ldi	r26, 0x34	; 52
     1da:	b0 e0       	ldi	r27, 0x00	; 0
     1dc:	e4 e3       	ldi	r30, 0x34	; 52
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	48 2f       	mov	r20, r24
     1e4:	8b 81       	ldd	r24, Y+3	; 0x03
     1e6:	28 2f       	mov	r18, r24
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	02 2e       	mov	r0, r18
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_u8SetPinDirection+0xe8>
     1f2:	88 0f       	add	r24, r24
     1f4:	99 1f       	adc	r25, r25
     1f6:	0a 94       	dec	r0
     1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_u8SetPinDirection+0xe4>
     1fa:	80 95       	com	r24
     1fc:	84 23       	and	r24, r20
     1fe:	8c 93       	st	X, r24
     200:	8b c0       	rjmp	.+278    	; 0x318 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8_PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
     202:	a1 e3       	ldi	r26, 0x31	; 49
     204:	b0 e0       	ldi	r27, 0x00	; 0
     206:	e1 e3       	ldi	r30, 0x31	; 49
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	80 81       	ld	r24, Z
     20c:	48 2f       	mov	r20, r24
     20e:	8b 81       	ldd	r24, Y+3	; 0x03
     210:	28 2f       	mov	r18, r24
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	02 2e       	mov	r0, r18
     21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_u8SetPinDirection+0x112>
     21c:	88 0f       	add	r24, r24
     21e:	99 1f       	adc	r25, r25
     220:	0a 94       	dec	r0
     222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_u8SetPinDirection+0x10e>
     224:	80 95       	com	r24
     226:	84 23       	and	r24, r20
     228:	8c 93       	st	X, r24
     22a:	76 c0       	rjmp	.+236    	; 0x318 <DIO_u8SetPinDirection+0x20a>
			default: Local_u8ErrorState=NOK;             break;
     22c:	19 82       	std	Y+1, r1	; 0x01
     22e:	74 c0       	rjmp	.+232    	; 0x318 <DIO_u8SetPinDirection+0x20a>
			}
		}
		else if (Copy_u8Direction == DIO_u8_PIN_OUTPUT)
     230:	8c 81       	ldd	r24, Y+4	; 0x04
     232:	81 30       	cpi	r24, 0x01	; 1
     234:	09 f0       	breq	.+2      	; 0x238 <DIO_u8SetPinDirection+0x12a>
     236:	70 c0       	rjmp	.+224    	; 0x318 <DIO_u8SetPinDirection+0x20a>
		{
			switch(Copy_u8Port)
     238:	8a 81       	ldd	r24, Y+2	; 0x02
     23a:	28 2f       	mov	r18, r24
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	3e 83       	std	Y+6, r19	; 0x06
     240:	2d 83       	std	Y+5, r18	; 0x05
     242:	8d 81       	ldd	r24, Y+5	; 0x05
     244:	9e 81       	ldd	r25, Y+6	; 0x06
     246:	81 30       	cpi	r24, 0x01	; 1
     248:	91 05       	cpc	r25, r1
     24a:	49 f1       	breq	.+82     	; 0x29e <DIO_u8SetPinDirection+0x190>
     24c:	2d 81       	ldd	r18, Y+5	; 0x05
     24e:	3e 81       	ldd	r19, Y+6	; 0x06
     250:	22 30       	cpi	r18, 0x02	; 2
     252:	31 05       	cpc	r19, r1
     254:	2c f4       	brge	.+10     	; 0x260 <DIO_u8SetPinDirection+0x152>
     256:	8d 81       	ldd	r24, Y+5	; 0x05
     258:	9e 81       	ldd	r25, Y+6	; 0x06
     25a:	00 97       	sbiw	r24, 0x00	; 0
     25c:	61 f0       	breq	.+24     	; 0x276 <DIO_u8SetPinDirection+0x168>
     25e:	5b c0       	rjmp	.+182    	; 0x316 <DIO_u8SetPinDirection+0x208>
     260:	2d 81       	ldd	r18, Y+5	; 0x05
     262:	3e 81       	ldd	r19, Y+6	; 0x06
     264:	22 30       	cpi	r18, 0x02	; 2
     266:	31 05       	cpc	r19, r1
     268:	71 f1       	breq	.+92     	; 0x2c6 <DIO_u8SetPinDirection+0x1b8>
     26a:	8d 81       	ldd	r24, Y+5	; 0x05
     26c:	9e 81       	ldd	r25, Y+6	; 0x06
     26e:	83 30       	cpi	r24, 0x03	; 3
     270:	91 05       	cpc	r25, r1
     272:	e9 f1       	breq	.+122    	; 0x2ee <DIO_u8SetPinDirection+0x1e0>
     274:	50 c0       	rjmp	.+160    	; 0x316 <DIO_u8SetPinDirection+0x208>
			{
			case DIO_u8_PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
     276:	aa e3       	ldi	r26, 0x3A	; 58
     278:	b0 e0       	ldi	r27, 0x00	; 0
     27a:	ea e3       	ldi	r30, 0x3A	; 58
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	48 2f       	mov	r20, r24
     282:	8b 81       	ldd	r24, Y+3	; 0x03
     284:	28 2f       	mov	r18, r24
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	02 2e       	mov	r0, r18
     28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_u8SetPinDirection+0x186>
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	0a 94       	dec	r0
     296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_u8SetPinDirection+0x182>
     298:	84 2b       	or	r24, r20
     29a:	8c 93       	st	X, r24
     29c:	3d c0       	rjmp	.+122    	; 0x318 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8_PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
     29e:	a7 e3       	ldi	r26, 0x37	; 55
     2a0:	b0 e0       	ldi	r27, 0x00	; 0
     2a2:	e7 e3       	ldi	r30, 0x37	; 55
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	48 2f       	mov	r20, r24
     2aa:	8b 81       	ldd	r24, Y+3	; 0x03
     2ac:	28 2f       	mov	r18, r24
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	02 2e       	mov	r0, r18
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_u8SetPinDirection+0x1ae>
     2b8:	88 0f       	add	r24, r24
     2ba:	99 1f       	adc	r25, r25
     2bc:	0a 94       	dec	r0
     2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_u8SetPinDirection+0x1aa>
     2c0:	84 2b       	or	r24, r20
     2c2:	8c 93       	st	X, r24
     2c4:	29 c0       	rjmp	.+82     	; 0x318 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8_PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
     2c6:	a4 e3       	ldi	r26, 0x34	; 52
     2c8:	b0 e0       	ldi	r27, 0x00	; 0
     2ca:	e4 e3       	ldi	r30, 0x34	; 52
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	48 2f       	mov	r20, r24
     2d2:	8b 81       	ldd	r24, Y+3	; 0x03
     2d4:	28 2f       	mov	r18, r24
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	02 2e       	mov	r0, r18
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_u8SetPinDirection+0x1d6>
     2e0:	88 0f       	add	r24, r24
     2e2:	99 1f       	adc	r25, r25
     2e4:	0a 94       	dec	r0
     2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_u8SetPinDirection+0x1d2>
     2e8:	84 2b       	or	r24, r20
     2ea:	8c 93       	st	X, r24
     2ec:	15 c0       	rjmp	.+42     	; 0x318 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8_PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
     2ee:	a1 e3       	ldi	r26, 0x31	; 49
     2f0:	b0 e0       	ldi	r27, 0x00	; 0
     2f2:	e1 e3       	ldi	r30, 0x31	; 49
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 81       	ld	r24, Z
     2f8:	48 2f       	mov	r20, r24
     2fa:	8b 81       	ldd	r24, Y+3	; 0x03
     2fc:	28 2f       	mov	r18, r24
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	02 2e       	mov	r0, r18
     306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_u8SetPinDirection+0x1fe>
     308:	88 0f       	add	r24, r24
     30a:	99 1f       	adc	r25, r25
     30c:	0a 94       	dec	r0
     30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_u8SetPinDirection+0x1fa>
     310:	84 2b       	or	r24, r20
     312:	8c 93       	st	X, r24
     314:	01 c0       	rjmp	.+2      	; 0x318 <DIO_u8SetPinDirection+0x20a>
			default: Local_u8ErrorState=NOK;             break;
     316:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	}

	return Local_u8ErrorState;
     318:	89 81       	ldd	r24, Y+1	; 0x01
}
     31a:	28 96       	adiw	r28, 0x08	; 8
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
     326:	cf 91       	pop	r28
     328:	df 91       	pop	r29
     32a:	08 95       	ret

0000032c <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
     32c:	df 93       	push	r29
     32e:	cf 93       	push	r28
     330:	00 d0       	rcall	.+0      	; 0x332 <DIO_u8SetPortDirection+0x6>
     332:	00 d0       	rcall	.+0      	; 0x334 <DIO_u8SetPortDirection+0x8>
     334:	0f 92       	push	r0
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	8a 83       	std	Y+2, r24	; 0x02
     33c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8Port)
     342:	8a 81       	ldd	r24, Y+2	; 0x02
     344:	28 2f       	mov	r18, r24
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	3d 83       	std	Y+5, r19	; 0x05
     34a:	2c 83       	std	Y+4, r18	; 0x04
     34c:	8c 81       	ldd	r24, Y+4	; 0x04
     34e:	9d 81       	ldd	r25, Y+5	; 0x05
     350:	81 30       	cpi	r24, 0x01	; 1
     352:	91 05       	cpc	r25, r1
     354:	d1 f0       	breq	.+52     	; 0x38a <DIO_u8SetPortDirection+0x5e>
     356:	2c 81       	ldd	r18, Y+4	; 0x04
     358:	3d 81       	ldd	r19, Y+5	; 0x05
     35a:	22 30       	cpi	r18, 0x02	; 2
     35c:	31 05       	cpc	r19, r1
     35e:	2c f4       	brge	.+10     	; 0x36a <DIO_u8SetPortDirection+0x3e>
     360:	8c 81       	ldd	r24, Y+4	; 0x04
     362:	9d 81       	ldd	r25, Y+5	; 0x05
     364:	00 97       	sbiw	r24, 0x00	; 0
     366:	61 f0       	breq	.+24     	; 0x380 <DIO_u8SetPortDirection+0x54>
     368:	1f c0       	rjmp	.+62     	; 0x3a8 <DIO_u8SetPortDirection+0x7c>
     36a:	2c 81       	ldd	r18, Y+4	; 0x04
     36c:	3d 81       	ldd	r19, Y+5	; 0x05
     36e:	22 30       	cpi	r18, 0x02	; 2
     370:	31 05       	cpc	r19, r1
     372:	81 f0       	breq	.+32     	; 0x394 <DIO_u8SetPortDirection+0x68>
     374:	8c 81       	ldd	r24, Y+4	; 0x04
     376:	9d 81       	ldd	r25, Y+5	; 0x05
     378:	83 30       	cpi	r24, 0x03	; 3
     37a:	91 05       	cpc	r25, r1
     37c:	81 f0       	breq	.+32     	; 0x39e <DIO_u8SetPortDirection+0x72>
     37e:	14 c0       	rjmp	.+40     	; 0x3a8 <DIO_u8SetPortDirection+0x7c>
	{
	case DIO_u8_PORTA: DDRA=Copy_u8Direction; break;
     380:	ea e3       	ldi	r30, 0x3A	; 58
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	8b 81       	ldd	r24, Y+3	; 0x03
     386:	80 83       	st	Z, r24
     388:	10 c0       	rjmp	.+32     	; 0x3aa <DIO_u8SetPortDirection+0x7e>
	case DIO_u8_PORTB: DDRB=Copy_u8Direction; break;
     38a:	e7 e3       	ldi	r30, 0x37	; 55
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	8b 81       	ldd	r24, Y+3	; 0x03
     390:	80 83       	st	Z, r24
     392:	0b c0       	rjmp	.+22     	; 0x3aa <DIO_u8SetPortDirection+0x7e>
	case DIO_u8_PORTC: DDRC=Copy_u8Direction; break;
     394:	e4 e3       	ldi	r30, 0x34	; 52
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	8b 81       	ldd	r24, Y+3	; 0x03
     39a:	80 83       	st	Z, r24
     39c:	06 c0       	rjmp	.+12     	; 0x3aa <DIO_u8SetPortDirection+0x7e>
	case DIO_u8_PORTD: DDRD=Copy_u8Direction; break;
     39e:	e1 e3       	ldi	r30, 0x31	; 49
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	8b 81       	ldd	r24, Y+3	; 0x03
     3a4:	80 83       	st	Z, r24
     3a6:	01 c0       	rjmp	.+2      	; 0x3aa <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=NOK;         break;
     3a8:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
}
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	cf 91       	pop	r28
     3b8:	df 91       	pop	r29
     3ba:	08 95       	ret

000003bc <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
     3bc:	df 93       	push	r29
     3be:	cf 93       	push	r28
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
     3c4:	28 97       	sbiw	r28, 0x08	; 8
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	f8 94       	cli
     3ca:	de bf       	out	0x3e, r29	; 62
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	cd bf       	out	0x3d, r28	; 61
     3d0:	8a 83       	std	Y+2, r24	; 0x02
     3d2:	6b 83       	std	Y+3, r22	; 0x03
     3d4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8Pin > DIO_u8_PIN7))
     3da:	8b 81       	ldd	r24, Y+3	; 0x03
     3dc:	88 30       	cpi	r24, 0x08	; 8
     3de:	10 f0       	brcs	.+4      	; 0x3e4 <DIO_u8SetPinValue+0x28>
	{
		Local_u8ErrorState=NOK;
     3e0:	19 82       	std	Y+1, r1	; 0x01
     3e2:	ee c0       	rjmp	.+476    	; 0x5c0 <__stack+0x161>
	}
	else
	{
		if(Copy_u8Value == DIO_u8_PIN_LOW)
     3e4:	8c 81       	ldd	r24, Y+4	; 0x04
     3e6:	88 23       	and	r24, r24
     3e8:	09 f0       	breq	.+2      	; 0x3ec <DIO_u8SetPinValue+0x30>
     3ea:	76 c0       	rjmp	.+236    	; 0x4d8 <__stack+0x79>
		{
			switch(Copy_u8Port)
     3ec:	8a 81       	ldd	r24, Y+2	; 0x02
     3ee:	28 2f       	mov	r18, r24
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	38 87       	std	Y+8, r19	; 0x08
     3f4:	2f 83       	std	Y+7, r18	; 0x07
     3f6:	8f 81       	ldd	r24, Y+7	; 0x07
     3f8:	98 85       	ldd	r25, Y+8	; 0x08
     3fa:	81 30       	cpi	r24, 0x01	; 1
     3fc:	91 05       	cpc	r25, r1
     3fe:	59 f1       	breq	.+86     	; 0x456 <DIO_u8SetPinValue+0x9a>
     400:	2f 81       	ldd	r18, Y+7	; 0x07
     402:	38 85       	ldd	r19, Y+8	; 0x08
     404:	22 30       	cpi	r18, 0x02	; 2
     406:	31 05       	cpc	r19, r1
     408:	2c f4       	brge	.+10     	; 0x414 <DIO_u8SetPinValue+0x58>
     40a:	8f 81       	ldd	r24, Y+7	; 0x07
     40c:	98 85       	ldd	r25, Y+8	; 0x08
     40e:	00 97       	sbiw	r24, 0x00	; 0
     410:	69 f0       	breq	.+26     	; 0x42c <DIO_u8SetPinValue+0x70>
     412:	60 c0       	rjmp	.+192    	; 0x4d4 <__stack+0x75>
     414:	2f 81       	ldd	r18, Y+7	; 0x07
     416:	38 85       	ldd	r19, Y+8	; 0x08
     418:	22 30       	cpi	r18, 0x02	; 2
     41a:	31 05       	cpc	r19, r1
     41c:	89 f1       	breq	.+98     	; 0x480 <__stack+0x21>
     41e:	8f 81       	ldd	r24, Y+7	; 0x07
     420:	98 85       	ldd	r25, Y+8	; 0x08
     422:	83 30       	cpi	r24, 0x03	; 3
     424:	91 05       	cpc	r25, r1
     426:	09 f4       	brne	.+2      	; 0x42a <DIO_u8SetPinValue+0x6e>
     428:	40 c0       	rjmp	.+128    	; 0x4aa <__stack+0x4b>
     42a:	54 c0       	rjmp	.+168    	; 0x4d4 <__stack+0x75>
			{
			case DIO_u8_PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
     42c:	ab e3       	ldi	r26, 0x3B	; 59
     42e:	b0 e0       	ldi	r27, 0x00	; 0
     430:	eb e3       	ldi	r30, 0x3B	; 59
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	48 2f       	mov	r20, r24
     438:	8b 81       	ldd	r24, Y+3	; 0x03
     43a:	28 2f       	mov	r18, r24
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	02 2e       	mov	r0, r18
     444:	02 c0       	rjmp	.+4      	; 0x44a <DIO_u8SetPinValue+0x8e>
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	0a 94       	dec	r0
     44c:	e2 f7       	brpl	.-8      	; 0x446 <DIO_u8SetPinValue+0x8a>
     44e:	80 95       	com	r24
     450:	84 23       	and	r24, r20
     452:	8c 93       	st	X, r24
     454:	b5 c0       	rjmp	.+362    	; 0x5c0 <__stack+0x161>
			case DIO_u8_PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
     456:	a8 e3       	ldi	r26, 0x38	; 56
     458:	b0 e0       	ldi	r27, 0x00	; 0
     45a:	e8 e3       	ldi	r30, 0x38	; 56
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	80 81       	ld	r24, Z
     460:	48 2f       	mov	r20, r24
     462:	8b 81       	ldd	r24, Y+3	; 0x03
     464:	28 2f       	mov	r18, r24
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	02 2e       	mov	r0, r18
     46e:	02 c0       	rjmp	.+4      	; 0x474 <__stack+0x15>
     470:	88 0f       	add	r24, r24
     472:	99 1f       	adc	r25, r25
     474:	0a 94       	dec	r0
     476:	e2 f7       	brpl	.-8      	; 0x470 <__stack+0x11>
     478:	80 95       	com	r24
     47a:	84 23       	and	r24, r20
     47c:	8c 93       	st	X, r24
     47e:	a0 c0       	rjmp	.+320    	; 0x5c0 <__stack+0x161>
			case DIO_u8_PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
     480:	a5 e3       	ldi	r26, 0x35	; 53
     482:	b0 e0       	ldi	r27, 0x00	; 0
     484:	e5 e3       	ldi	r30, 0x35	; 53
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	80 81       	ld	r24, Z
     48a:	48 2f       	mov	r20, r24
     48c:	8b 81       	ldd	r24, Y+3	; 0x03
     48e:	28 2f       	mov	r18, r24
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	02 2e       	mov	r0, r18
     498:	02 c0       	rjmp	.+4      	; 0x49e <__stack+0x3f>
     49a:	88 0f       	add	r24, r24
     49c:	99 1f       	adc	r25, r25
     49e:	0a 94       	dec	r0
     4a0:	e2 f7       	brpl	.-8      	; 0x49a <__stack+0x3b>
     4a2:	80 95       	com	r24
     4a4:	84 23       	and	r24, r20
     4a6:	8c 93       	st	X, r24
     4a8:	8b c0       	rjmp	.+278    	; 0x5c0 <__stack+0x161>
			case DIO_u8_PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
     4aa:	a2 e3       	ldi	r26, 0x32	; 50
     4ac:	b0 e0       	ldi	r27, 0x00	; 0
     4ae:	e2 e3       	ldi	r30, 0x32	; 50
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	80 81       	ld	r24, Z
     4b4:	48 2f       	mov	r20, r24
     4b6:	8b 81       	ldd	r24, Y+3	; 0x03
     4b8:	28 2f       	mov	r18, r24
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	02 2e       	mov	r0, r18
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__stack+0x69>
     4c4:	88 0f       	add	r24, r24
     4c6:	99 1f       	adc	r25, r25
     4c8:	0a 94       	dec	r0
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <__stack+0x65>
     4cc:	80 95       	com	r24
     4ce:	84 23       	and	r24, r20
     4d0:	8c 93       	st	X, r24
     4d2:	76 c0       	rjmp	.+236    	; 0x5c0 <__stack+0x161>
			default: Local_u8ErrorState=NOK;              break;
     4d4:	19 82       	std	Y+1, r1	; 0x01
     4d6:	74 c0       	rjmp	.+232    	; 0x5c0 <__stack+0x161>
			}
		}
		else if (Copy_u8Value == DIO_u8_PIN_HIGH)
     4d8:	8c 81       	ldd	r24, Y+4	; 0x04
     4da:	81 30       	cpi	r24, 0x01	; 1
     4dc:	09 f0       	breq	.+2      	; 0x4e0 <__stack+0x81>
     4de:	70 c0       	rjmp	.+224    	; 0x5c0 <__stack+0x161>
		{
			switch(Copy_u8Port)
     4e0:	8a 81       	ldd	r24, Y+2	; 0x02
     4e2:	28 2f       	mov	r18, r24
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	3e 83       	std	Y+6, r19	; 0x06
     4e8:	2d 83       	std	Y+5, r18	; 0x05
     4ea:	8d 81       	ldd	r24, Y+5	; 0x05
     4ec:	9e 81       	ldd	r25, Y+6	; 0x06
     4ee:	81 30       	cpi	r24, 0x01	; 1
     4f0:	91 05       	cpc	r25, r1
     4f2:	49 f1       	breq	.+82     	; 0x546 <__stack+0xe7>
     4f4:	2d 81       	ldd	r18, Y+5	; 0x05
     4f6:	3e 81       	ldd	r19, Y+6	; 0x06
     4f8:	22 30       	cpi	r18, 0x02	; 2
     4fa:	31 05       	cpc	r19, r1
     4fc:	2c f4       	brge	.+10     	; 0x508 <__stack+0xa9>
     4fe:	8d 81       	ldd	r24, Y+5	; 0x05
     500:	9e 81       	ldd	r25, Y+6	; 0x06
     502:	00 97       	sbiw	r24, 0x00	; 0
     504:	61 f0       	breq	.+24     	; 0x51e <__stack+0xbf>
     506:	5b c0       	rjmp	.+182    	; 0x5be <__stack+0x15f>
     508:	2d 81       	ldd	r18, Y+5	; 0x05
     50a:	3e 81       	ldd	r19, Y+6	; 0x06
     50c:	22 30       	cpi	r18, 0x02	; 2
     50e:	31 05       	cpc	r19, r1
     510:	71 f1       	breq	.+92     	; 0x56e <__stack+0x10f>
     512:	8d 81       	ldd	r24, Y+5	; 0x05
     514:	9e 81       	ldd	r25, Y+6	; 0x06
     516:	83 30       	cpi	r24, 0x03	; 3
     518:	91 05       	cpc	r25, r1
     51a:	e9 f1       	breq	.+122    	; 0x596 <__stack+0x137>
     51c:	50 c0       	rjmp	.+160    	; 0x5be <__stack+0x15f>
			{
			case DIO_u8_PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
     51e:	ab e3       	ldi	r26, 0x3B	; 59
     520:	b0 e0       	ldi	r27, 0x00	; 0
     522:	eb e3       	ldi	r30, 0x3B	; 59
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	80 81       	ld	r24, Z
     528:	48 2f       	mov	r20, r24
     52a:	8b 81       	ldd	r24, Y+3	; 0x03
     52c:	28 2f       	mov	r18, r24
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	02 2e       	mov	r0, r18
     536:	02 c0       	rjmp	.+4      	; 0x53c <__stack+0xdd>
     538:	88 0f       	add	r24, r24
     53a:	99 1f       	adc	r25, r25
     53c:	0a 94       	dec	r0
     53e:	e2 f7       	brpl	.-8      	; 0x538 <__stack+0xd9>
     540:	84 2b       	or	r24, r20
     542:	8c 93       	st	X, r24
     544:	3d c0       	rjmp	.+122    	; 0x5c0 <__stack+0x161>
			case DIO_u8_PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
     546:	a8 e3       	ldi	r26, 0x38	; 56
     548:	b0 e0       	ldi	r27, 0x00	; 0
     54a:	e8 e3       	ldi	r30, 0x38	; 56
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	80 81       	ld	r24, Z
     550:	48 2f       	mov	r20, r24
     552:	8b 81       	ldd	r24, Y+3	; 0x03
     554:	28 2f       	mov	r18, r24
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	02 2e       	mov	r0, r18
     55e:	02 c0       	rjmp	.+4      	; 0x564 <__stack+0x105>
     560:	88 0f       	add	r24, r24
     562:	99 1f       	adc	r25, r25
     564:	0a 94       	dec	r0
     566:	e2 f7       	brpl	.-8      	; 0x560 <__stack+0x101>
     568:	84 2b       	or	r24, r20
     56a:	8c 93       	st	X, r24
     56c:	29 c0       	rjmp	.+82     	; 0x5c0 <__stack+0x161>
			case DIO_u8_PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
     56e:	a5 e3       	ldi	r26, 0x35	; 53
     570:	b0 e0       	ldi	r27, 0x00	; 0
     572:	e5 e3       	ldi	r30, 0x35	; 53
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	48 2f       	mov	r20, r24
     57a:	8b 81       	ldd	r24, Y+3	; 0x03
     57c:	28 2f       	mov	r18, r24
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	02 2e       	mov	r0, r18
     586:	02 c0       	rjmp	.+4      	; 0x58c <__stack+0x12d>
     588:	88 0f       	add	r24, r24
     58a:	99 1f       	adc	r25, r25
     58c:	0a 94       	dec	r0
     58e:	e2 f7       	brpl	.-8      	; 0x588 <__stack+0x129>
     590:	84 2b       	or	r24, r20
     592:	8c 93       	st	X, r24
     594:	15 c0       	rjmp	.+42     	; 0x5c0 <__stack+0x161>
			case DIO_u8_PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
     596:	a2 e3       	ldi	r26, 0x32	; 50
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	e2 e3       	ldi	r30, 0x32	; 50
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	80 81       	ld	r24, Z
     5a0:	48 2f       	mov	r20, r24
     5a2:	8b 81       	ldd	r24, Y+3	; 0x03
     5a4:	28 2f       	mov	r18, r24
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	02 2e       	mov	r0, r18
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <__stack+0x155>
     5b0:	88 0f       	add	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	0a 94       	dec	r0
     5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <__stack+0x151>
     5b8:	84 2b       	or	r24, r20
     5ba:	8c 93       	st	X, r24
     5bc:	01 c0       	rjmp	.+2      	; 0x5c0 <__stack+0x161>
			default: Local_u8ErrorState=NOK;              break;
     5be:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	}
	return Local_u8ErrorState;
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
}
     5c2:	28 96       	adiw	r28, 0x08	; 8
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	f8 94       	cli
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	cd bf       	out	0x3d, r28	; 61
     5ce:	cf 91       	pop	r28
     5d0:	df 91       	pop	r29
     5d2:	08 95       	ret

000005d4 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
     5d4:	df 93       	push	r29
     5d6:	cf 93       	push	r28
     5d8:	00 d0       	rcall	.+0      	; 0x5da <DIO_u8SetPortValue+0x6>
     5da:	00 d0       	rcall	.+0      	; 0x5dc <DIO_u8SetPortValue+0x8>
     5dc:	0f 92       	push	r0
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
     5e2:	8a 83       	std	Y+2, r24	; 0x02
     5e4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8Port)
     5ea:	8a 81       	ldd	r24, Y+2	; 0x02
     5ec:	28 2f       	mov	r18, r24
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	3d 83       	std	Y+5, r19	; 0x05
     5f2:	2c 83       	std	Y+4, r18	; 0x04
     5f4:	8c 81       	ldd	r24, Y+4	; 0x04
     5f6:	9d 81       	ldd	r25, Y+5	; 0x05
     5f8:	81 30       	cpi	r24, 0x01	; 1
     5fa:	91 05       	cpc	r25, r1
     5fc:	d1 f0       	breq	.+52     	; 0x632 <DIO_u8SetPortValue+0x5e>
     5fe:	2c 81       	ldd	r18, Y+4	; 0x04
     600:	3d 81       	ldd	r19, Y+5	; 0x05
     602:	22 30       	cpi	r18, 0x02	; 2
     604:	31 05       	cpc	r19, r1
     606:	2c f4       	brge	.+10     	; 0x612 <DIO_u8SetPortValue+0x3e>
     608:	8c 81       	ldd	r24, Y+4	; 0x04
     60a:	9d 81       	ldd	r25, Y+5	; 0x05
     60c:	00 97       	sbiw	r24, 0x00	; 0
     60e:	61 f0       	breq	.+24     	; 0x628 <DIO_u8SetPortValue+0x54>
     610:	1f c0       	rjmp	.+62     	; 0x650 <DIO_u8SetPortValue+0x7c>
     612:	2c 81       	ldd	r18, Y+4	; 0x04
     614:	3d 81       	ldd	r19, Y+5	; 0x05
     616:	22 30       	cpi	r18, 0x02	; 2
     618:	31 05       	cpc	r19, r1
     61a:	81 f0       	breq	.+32     	; 0x63c <DIO_u8SetPortValue+0x68>
     61c:	8c 81       	ldd	r24, Y+4	; 0x04
     61e:	9d 81       	ldd	r25, Y+5	; 0x05
     620:	83 30       	cpi	r24, 0x03	; 3
     622:	91 05       	cpc	r25, r1
     624:	81 f0       	breq	.+32     	; 0x646 <DIO_u8SetPortValue+0x72>
     626:	14 c0       	rjmp	.+40     	; 0x650 <DIO_u8SetPortValue+0x7c>
	{
	case DIO_u8_PORTA: PORTA=Copy_u8Value; break;
     628:	eb e3       	ldi	r30, 0x3B	; 59
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	8b 81       	ldd	r24, Y+3	; 0x03
     62e:	80 83       	st	Z, r24
     630:	10 c0       	rjmp	.+32     	; 0x652 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTB: PORTB=Copy_u8Value; break;
     632:	e8 e3       	ldi	r30, 0x38	; 56
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	8b 81       	ldd	r24, Y+3	; 0x03
     638:	80 83       	st	Z, r24
     63a:	0b c0       	rjmp	.+22     	; 0x652 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTC: PORTC=Copy_u8Value; break;
     63c:	e5 e3       	ldi	r30, 0x35	; 53
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	8b 81       	ldd	r24, Y+3	; 0x03
     642:	80 83       	st	Z, r24
     644:	06 c0       	rjmp	.+12     	; 0x652 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTD: PORTD=Copy_u8Value; break;
     646:	e2 e3       	ldi	r30, 0x32	; 50
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	8b 81       	ldd	r24, Y+3	; 0x03
     64c:	80 83       	st	Z, r24
     64e:	01 c0       	rjmp	.+2      	; 0x652 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=NOK;          break;
     650:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
     652:	89 81       	ldd	r24, Y+1	; 0x01
}
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	cf 91       	pop	r28
     660:	df 91       	pop	r29
     662:	08 95       	ret

00000664 <DIO_u8ReadPinValue>:

u8 DIO_u8ReadPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
     664:	df 93       	push	r29
     666:	cf 93       	push	r28
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
     66c:	27 97       	sbiw	r28, 0x07	; 7
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	f8 94       	cli
     672:	de bf       	out	0x3e, r29	; 62
     674:	0f be       	out	0x3f, r0	; 63
     676:	cd bf       	out	0x3d, r28	; 61
     678:	8a 83       	std	Y+2, r24	; 0x02
     67a:	6b 83       	std	Y+3, r22	; 0x03
     67c:	5d 83       	std	Y+5, r21	; 0x05
     67e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8Value == NULL)
     684:	8c 81       	ldd	r24, Y+4	; 0x04
     686:	9d 81       	ldd	r25, Y+5	; 0x05
     688:	00 97       	sbiw	r24, 0x00	; 0
     68a:	19 f4       	brne	.+6      	; 0x692 <DIO_u8ReadPinValue+0x2e>
	{
		Local_u8ErrorState=NULL_POINTER;
     68c:	82 e0       	ldi	r24, 0x02	; 2
     68e:	89 83       	std	Y+1, r24	; 0x01
     690:	77 c0       	rjmp	.+238    	; 0x780 <DIO_u8ReadPinValue+0x11c>
	}
	else if((Copy_u8Pin > DIO_u8_PIN7))
     692:	8b 81       	ldd	r24, Y+3	; 0x03
     694:	88 30       	cpi	r24, 0x08	; 8
     696:	10 f0       	brcs	.+4      	; 0x69c <DIO_u8ReadPinValue+0x38>
	{
		Local_u8ErrorState=NOK;
     698:	19 82       	std	Y+1, r1	; 0x01
     69a:	72 c0       	rjmp	.+228    	; 0x780 <DIO_u8ReadPinValue+0x11c>
	}
	else
	{
		switch(Copy_u8Port)
     69c:	8a 81       	ldd	r24, Y+2	; 0x02
     69e:	28 2f       	mov	r18, r24
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	3f 83       	std	Y+7, r19	; 0x07
     6a4:	2e 83       	std	Y+6, r18	; 0x06
     6a6:	4e 81       	ldd	r20, Y+6	; 0x06
     6a8:	5f 81       	ldd	r21, Y+7	; 0x07
     6aa:	41 30       	cpi	r20, 0x01	; 1
     6ac:	51 05       	cpc	r21, r1
     6ae:	59 f1       	breq	.+86     	; 0x706 <DIO_u8ReadPinValue+0xa2>
     6b0:	8e 81       	ldd	r24, Y+6	; 0x06
     6b2:	9f 81       	ldd	r25, Y+7	; 0x07
     6b4:	82 30       	cpi	r24, 0x02	; 2
     6b6:	91 05       	cpc	r25, r1
     6b8:	34 f4       	brge	.+12     	; 0x6c6 <DIO_u8ReadPinValue+0x62>
     6ba:	2e 81       	ldd	r18, Y+6	; 0x06
     6bc:	3f 81       	ldd	r19, Y+7	; 0x07
     6be:	21 15       	cp	r18, r1
     6c0:	31 05       	cpc	r19, r1
     6c2:	69 f0       	breq	.+26     	; 0x6de <DIO_u8ReadPinValue+0x7a>
     6c4:	5c c0       	rjmp	.+184    	; 0x77e <DIO_u8ReadPinValue+0x11a>
     6c6:	4e 81       	ldd	r20, Y+6	; 0x06
     6c8:	5f 81       	ldd	r21, Y+7	; 0x07
     6ca:	42 30       	cpi	r20, 0x02	; 2
     6cc:	51 05       	cpc	r21, r1
     6ce:	79 f1       	breq	.+94     	; 0x72e <DIO_u8ReadPinValue+0xca>
     6d0:	8e 81       	ldd	r24, Y+6	; 0x06
     6d2:	9f 81       	ldd	r25, Y+7	; 0x07
     6d4:	83 30       	cpi	r24, 0x03	; 3
     6d6:	91 05       	cpc	r25, r1
     6d8:	09 f4       	brne	.+2      	; 0x6dc <DIO_u8ReadPinValue+0x78>
     6da:	3d c0       	rjmp	.+122    	; 0x756 <DIO_u8ReadPinValue+0xf2>
     6dc:	50 c0       	rjmp	.+160    	; 0x77e <DIO_u8ReadPinValue+0x11a>
		{
		case DIO_u8_PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
     6de:	e9 e3       	ldi	r30, 0x39	; 57
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	80 81       	ld	r24, Z
     6e4:	28 2f       	mov	r18, r24
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ea:	88 2f       	mov	r24, r24
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	a9 01       	movw	r20, r18
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <DIO_u8ReadPinValue+0x92>
     6f2:	55 95       	asr	r21
     6f4:	47 95       	ror	r20
     6f6:	8a 95       	dec	r24
     6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <DIO_u8ReadPinValue+0x8e>
     6fa:	ca 01       	movw	r24, r20
     6fc:	81 70       	andi	r24, 0x01	; 1
     6fe:	ec 81       	ldd	r30, Y+4	; 0x04
     700:	fd 81       	ldd	r31, Y+5	; 0x05
     702:	80 83       	st	Z, r24
     704:	3d c0       	rjmp	.+122    	; 0x780 <DIO_u8ReadPinValue+0x11c>
		case DIO_u8_PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
     706:	e6 e3       	ldi	r30, 0x36	; 54
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	80 81       	ld	r24, Z
     70c:	28 2f       	mov	r18, r24
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	8b 81       	ldd	r24, Y+3	; 0x03
     712:	88 2f       	mov	r24, r24
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	a9 01       	movw	r20, r18
     718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_u8ReadPinValue+0xba>
     71a:	55 95       	asr	r21
     71c:	47 95       	ror	r20
     71e:	8a 95       	dec	r24
     720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_u8ReadPinValue+0xb6>
     722:	ca 01       	movw	r24, r20
     724:	81 70       	andi	r24, 0x01	; 1
     726:	ec 81       	ldd	r30, Y+4	; 0x04
     728:	fd 81       	ldd	r31, Y+5	; 0x05
     72a:	80 83       	st	Z, r24
     72c:	29 c0       	rjmp	.+82     	; 0x780 <DIO_u8ReadPinValue+0x11c>
		case DIO_u8_PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
     72e:	e3 e3       	ldi	r30, 0x33	; 51
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	80 81       	ld	r24, Z
     734:	28 2f       	mov	r18, r24
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	8b 81       	ldd	r24, Y+3	; 0x03
     73a:	88 2f       	mov	r24, r24
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	a9 01       	movw	r20, r18
     740:	02 c0       	rjmp	.+4      	; 0x746 <DIO_u8ReadPinValue+0xe2>
     742:	55 95       	asr	r21
     744:	47 95       	ror	r20
     746:	8a 95       	dec	r24
     748:	e2 f7       	brpl	.-8      	; 0x742 <DIO_u8ReadPinValue+0xde>
     74a:	ca 01       	movw	r24, r20
     74c:	81 70       	andi	r24, 0x01	; 1
     74e:	ec 81       	ldd	r30, Y+4	; 0x04
     750:	fd 81       	ldd	r31, Y+5	; 0x05
     752:	80 83       	st	Z, r24
     754:	15 c0       	rjmp	.+42     	; 0x780 <DIO_u8ReadPinValue+0x11c>
		case DIO_u8_PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
     756:	e0 e3       	ldi	r30, 0x30	; 48
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 81       	ld	r24, Z
     75c:	28 2f       	mov	r18, r24
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	8b 81       	ldd	r24, Y+3	; 0x03
     762:	88 2f       	mov	r24, r24
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	a9 01       	movw	r20, r18
     768:	02 c0       	rjmp	.+4      	; 0x76e <DIO_u8ReadPinValue+0x10a>
     76a:	55 95       	asr	r21
     76c:	47 95       	ror	r20
     76e:	8a 95       	dec	r24
     770:	e2 f7       	brpl	.-8      	; 0x76a <DIO_u8ReadPinValue+0x106>
     772:	ca 01       	movw	r24, r20
     774:	81 70       	andi	r24, 0x01	; 1
     776:	ec 81       	ldd	r30, Y+4	; 0x04
     778:	fd 81       	ldd	r31, Y+5	; 0x05
     77a:	80 83       	st	Z, r24
     77c:	01 c0       	rjmp	.+2      	; 0x780 <DIO_u8ReadPinValue+0x11c>
		default: Local_u8ErrorState=NOK;                           break;
     77e:	19 82       	std	Y+1, r1	; 0x01
		}
	}

	return Local_u8ErrorState;
     780:	89 81       	ldd	r24, Y+1	; 0x01
}
     782:	27 96       	adiw	r28, 0x07	; 7
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
     78e:	cf 91       	pop	r28
     790:	df 91       	pop	r29
     792:	08 95       	ret

00000794 <DIO_u8TogglePinVlaue>:

u8 DIO_u8TogglePinVlaue(u8 Copy_u8Port, u8 Copy_u8PinNum)
{
     794:	df 93       	push	r29
     796:	cf 93       	push	r28
     798:	00 d0       	rcall	.+0      	; 0x79a <DIO_u8TogglePinVlaue+0x6>
     79a:	00 d0       	rcall	.+0      	; 0x79c <DIO_u8TogglePinVlaue+0x8>
     79c:	0f 92       	push	r0
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
     7a2:	8a 83       	std	Y+2, r24	; 0x02
     7a4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PinNum > DIO_u8_PIN7)
     7aa:	8b 81       	ldd	r24, Y+3	; 0x03
     7ac:	88 30       	cpi	r24, 0x08	; 8
     7ae:	10 f0       	brcs	.+4      	; 0x7b4 <DIO_u8TogglePinVlaue+0x20>
	{
		Local_u8ErrorState = NOK;
     7b0:	19 82       	std	Y+1, r1	; 0x01
     7b2:	70 c0       	rjmp	.+224    	; 0x894 <DIO_u8TogglePinVlaue+0x100>
	}
	else
	{
		switch (Copy_u8Port)
     7b4:	8a 81       	ldd	r24, Y+2	; 0x02
     7b6:	28 2f       	mov	r18, r24
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	3d 83       	std	Y+5, r19	; 0x05
     7bc:	2c 83       	std	Y+4, r18	; 0x04
     7be:	8c 81       	ldd	r24, Y+4	; 0x04
     7c0:	9d 81       	ldd	r25, Y+5	; 0x05
     7c2:	81 30       	cpi	r24, 0x01	; 1
     7c4:	91 05       	cpc	r25, r1
     7c6:	49 f1       	breq	.+82     	; 0x81a <DIO_u8TogglePinVlaue+0x86>
     7c8:	2c 81       	ldd	r18, Y+4	; 0x04
     7ca:	3d 81       	ldd	r19, Y+5	; 0x05
     7cc:	22 30       	cpi	r18, 0x02	; 2
     7ce:	31 05       	cpc	r19, r1
     7d0:	2c f4       	brge	.+10     	; 0x7dc <DIO_u8TogglePinVlaue+0x48>
     7d2:	8c 81       	ldd	r24, Y+4	; 0x04
     7d4:	9d 81       	ldd	r25, Y+5	; 0x05
     7d6:	00 97       	sbiw	r24, 0x00	; 0
     7d8:	61 f0       	breq	.+24     	; 0x7f2 <DIO_u8TogglePinVlaue+0x5e>
     7da:	5b c0       	rjmp	.+182    	; 0x892 <DIO_u8TogglePinVlaue+0xfe>
     7dc:	2c 81       	ldd	r18, Y+4	; 0x04
     7de:	3d 81       	ldd	r19, Y+5	; 0x05
     7e0:	22 30       	cpi	r18, 0x02	; 2
     7e2:	31 05       	cpc	r19, r1
     7e4:	71 f1       	breq	.+92     	; 0x842 <DIO_u8TogglePinVlaue+0xae>
     7e6:	8c 81       	ldd	r24, Y+4	; 0x04
     7e8:	9d 81       	ldd	r25, Y+5	; 0x05
     7ea:	83 30       	cpi	r24, 0x03	; 3
     7ec:	91 05       	cpc	r25, r1
     7ee:	e9 f1       	breq	.+122    	; 0x86a <DIO_u8TogglePinVlaue+0xd6>
     7f0:	50 c0       	rjmp	.+160    	; 0x892 <DIO_u8TogglePinVlaue+0xfe>
		{
		case DIO_u8_PORTA:
			TOGGLE_BIT(PORTA, Copy_u8PinNum);
     7f2:	ab e3       	ldi	r26, 0x3B	; 59
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	eb e3       	ldi	r30, 0x3B	; 59
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	48 2f       	mov	r20, r24
     7fe:	8b 81       	ldd	r24, Y+3	; 0x03
     800:	28 2f       	mov	r18, r24
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	02 2e       	mov	r0, r18
     80a:	02 c0       	rjmp	.+4      	; 0x810 <DIO_u8TogglePinVlaue+0x7c>
     80c:	88 0f       	add	r24, r24
     80e:	99 1f       	adc	r25, r25
     810:	0a 94       	dec	r0
     812:	e2 f7       	brpl	.-8      	; 0x80c <DIO_u8TogglePinVlaue+0x78>
     814:	84 27       	eor	r24, r20
     816:	8c 93       	st	X, r24
     818:	3d c0       	rjmp	.+122    	; 0x894 <DIO_u8TogglePinVlaue+0x100>
			break;
		case DIO_u8_PORTB:
			TOGGLE_BIT(PORTB, Copy_u8PinNum);
     81a:	a8 e3       	ldi	r26, 0x38	; 56
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 e3       	ldi	r30, 0x38	; 56
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	80 81       	ld	r24, Z
     824:	48 2f       	mov	r20, r24
     826:	8b 81       	ldd	r24, Y+3	; 0x03
     828:	28 2f       	mov	r18, r24
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	02 2e       	mov	r0, r18
     832:	02 c0       	rjmp	.+4      	; 0x838 <DIO_u8TogglePinVlaue+0xa4>
     834:	88 0f       	add	r24, r24
     836:	99 1f       	adc	r25, r25
     838:	0a 94       	dec	r0
     83a:	e2 f7       	brpl	.-8      	; 0x834 <DIO_u8TogglePinVlaue+0xa0>
     83c:	84 27       	eor	r24, r20
     83e:	8c 93       	st	X, r24
     840:	29 c0       	rjmp	.+82     	; 0x894 <DIO_u8TogglePinVlaue+0x100>
			break;
		case DIO_u8_PORTC:
			TOGGLE_BIT(PORTC, Copy_u8PinNum);
     842:	a5 e3       	ldi	r26, 0x35	; 53
     844:	b0 e0       	ldi	r27, 0x00	; 0
     846:	e5 e3       	ldi	r30, 0x35	; 53
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	80 81       	ld	r24, Z
     84c:	48 2f       	mov	r20, r24
     84e:	8b 81       	ldd	r24, Y+3	; 0x03
     850:	28 2f       	mov	r18, r24
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	02 2e       	mov	r0, r18
     85a:	02 c0       	rjmp	.+4      	; 0x860 <DIO_u8TogglePinVlaue+0xcc>
     85c:	88 0f       	add	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	0a 94       	dec	r0
     862:	e2 f7       	brpl	.-8      	; 0x85c <DIO_u8TogglePinVlaue+0xc8>
     864:	84 27       	eor	r24, r20
     866:	8c 93       	st	X, r24
     868:	15 c0       	rjmp	.+42     	; 0x894 <DIO_u8TogglePinVlaue+0x100>
			break;
		case DIO_u8_PORTD:
			TOGGLE_BIT(PORTD, Copy_u8PinNum);
     86a:	a2 e3       	ldi	r26, 0x32	; 50
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	e2 e3       	ldi	r30, 0x32	; 50
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	80 81       	ld	r24, Z
     874:	48 2f       	mov	r20, r24
     876:	8b 81       	ldd	r24, Y+3	; 0x03
     878:	28 2f       	mov	r18, r24
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	02 2e       	mov	r0, r18
     882:	02 c0       	rjmp	.+4      	; 0x888 <DIO_u8TogglePinVlaue+0xf4>
     884:	88 0f       	add	r24, r24
     886:	99 1f       	adc	r25, r25
     888:	0a 94       	dec	r0
     88a:	e2 f7       	brpl	.-8      	; 0x884 <DIO_u8TogglePinVlaue+0xf0>
     88c:	84 27       	eor	r24, r20
     88e:	8c 93       	st	X, r24
     890:	01 c0       	rjmp	.+2      	; 0x894 <DIO_u8TogglePinVlaue+0x100>
			break;
		default:
			Local_u8ErrorState = NOK;
     892:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}

	return Local_u8ErrorState;
     894:	89 81       	ldd	r24, Y+1	; 0x01
}
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	0f 90       	pop	r0
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	cf 91       	pop	r28
     8a2:	df 91       	pop	r29
     8a4:	08 95       	ret

000008a6 <EXTI_voidINT0Init>:
static void (*EXTI_pvCallBackFunc[3])(void)={NULL};



void EXTI_voidINT0Init(void)
{
     8a6:	df 93       	push	r29
     8a8:	cf 93       	push	r28
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
#elif EXTI_u8_INT0_SENSE == EXTI_u8_FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
	SET_BIT(MCUCR,MCUCR_ISC01);

#elif EXTI_u8_INT0_SENSE == EXTI_u8_RISING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC00);
     8ae:	a5 e5       	ldi	r26, 0x55	; 85
     8b0:	b0 e0       	ldi	r27, 0x00	; 0
     8b2:	e5 e5       	ldi	r30, 0x55	; 85
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	80 81       	ld	r24, Z
     8b8:	81 60       	ori	r24, 0x01	; 1
     8ba:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
     8bc:	a5 e5       	ldi	r26, 0x55	; 85
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	e5 e5       	ldi	r30, 0x55	; 85
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	80 81       	ld	r24, Z
     8c6:	82 60       	ori	r24, 0x02	; 2
     8c8:	8c 93       	st	X, r24

#endif

	/*1- Set the Initial state configuration*/
#if EXTI_u8_INT0_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
     8ca:	ab e5       	ldi	r26, 0x5B	; 91
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	eb e5       	ldi	r30, 0x5B	; 91
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
     8d4:	80 64       	ori	r24, 0x40	; 64
     8d6:	8c 93       	st	X, r24
#else
#error "Wrong EXTI_u8_INT0_INITIAL_STATE configuration option"

#endif

}
     8d8:	cf 91       	pop	r28
     8da:	df 91       	pop	r29
     8dc:	08 95       	ret

000008de <EXTI_voidINT1Init>:
void EXTI_voidINT1Init(void)
{
     8de:	df 93       	push	r29
     8e0:	cf 93       	push	r28
     8e2:	cd b7       	in	r28, 0x3d	; 61
     8e4:	de b7       	in	r29, 0x3e	; 62
#elif EXTI_u8_INT1_SENSE == EXTI_u8_ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);

#elif EXTI_u8_INT1_SENSE == EXTI_u8_FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
     8e6:	a5 e5       	ldi	r26, 0x55	; 85
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	e5 e5       	ldi	r30, 0x55	; 85
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
     8f0:	8b 7f       	andi	r24, 0xFB	; 251
     8f2:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
     8f4:	a5 e5       	ldi	r26, 0x55	; 85
     8f6:	b0 e0       	ldi	r27, 0x00	; 0
     8f8:	e5 e5       	ldi	r30, 0x55	; 85
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	88 60       	ori	r24, 0x08	; 8
     900:	8c 93       	st	X, r24

#endif

	/*1- Set the Initial state configuration*/
#if EXTI_u8_INT1_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1);
     902:	ab e5       	ldi	r26, 0x5B	; 91
     904:	b0 e0       	ldi	r27, 0x00	; 0
     906:	eb e5       	ldi	r30, 0x5B	; 91
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	80 81       	ld	r24, Z
     90c:	80 68       	ori	r24, 0x80	; 128
     90e:	8c 93       	st	X, r24

#else
#error "Wrong EXTI_u8_INT0_INITIAL_STATE configuration option"

#endif
}
     910:	cf 91       	pop	r28
     912:	df 91       	pop	r29
     914:	08 95       	ret

00000916 <EXTI_voidINT2Init>:
void EXTI_voidINT2Init(void)
{
     916:	df 93       	push	r29
     918:	cf 93       	push	r28
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
	/*1- Set the sense control configuration*/
#if EXTI_u8_INT1_SENSE == EXTI_u8_FALLING_EDGE
	CLR_BIT(MCUCR,MCUCSR_ISC2);
     91e:	a5 e5       	ldi	r26, 0x55	; 85
     920:	b0 e0       	ldi	r27, 0x00	; 0
     922:	e5 e5       	ldi	r30, 0x55	; 85
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	8f 7b       	andi	r24, 0xBF	; 191
     92a:	8c 93       	st	X, r24

#endif

	/*1- Set the Initial state configuration*/
#if EXTI_u8_INT1_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1);
     92c:	ab e5       	ldi	r26, 0x5B	; 91
     92e:	b0 e0       	ldi	r27, 0x00	; 0
     930:	eb e5       	ldi	r30, 0x5B	; 91
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	80 68       	ori	r24, 0x80	; 128
     938:	8c 93       	st	X, r24

#else
#error "Wrong EXTI_u8_INT0_INITIAL_STATE configuration option"

#endif
}
     93a:	cf 91       	pop	r28
     93c:	df 91       	pop	r29
     93e:	08 95       	ret

00000940 <EXTI_u8SetSenseControl>:

u8 EXTI_u8SetSenseControl(u8 Copy_u8IntNum, u8 Copy_u8Sense)
{
     940:	df 93       	push	r29
     942:	cf 93       	push	r28
     944:	00 d0       	rcall	.+0      	; 0x946 <EXTI_u8SetSenseControl+0x6>
     946:	00 d0       	rcall	.+0      	; 0x948 <EXTI_u8SetSenseControl+0x8>
     948:	0f 92       	push	r0
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	8a 83       	std	Y+2, r24	; 0x02
     950:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorSate = OK;
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8IntNum)
     956:	8a 81       	ldd	r24, Y+2	; 0x02
     958:	28 2f       	mov	r18, r24
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	3d 83       	std	Y+5, r19	; 0x05
     95e:	2c 83       	std	Y+4, r18	; 0x04
     960:	8c 81       	ldd	r24, Y+4	; 0x04
     962:	9d 81       	ldd	r25, Y+5	; 0x05
     964:	81 30       	cpi	r24, 0x01	; 1
     966:	91 05       	cpc	r25, r1
     968:	09 f4       	brne	.+2      	; 0x96c <EXTI_u8SetSenseControl+0x2c>
     96a:	55 c0       	rjmp	.+170    	; 0xa16 <EXTI_u8SetSenseControl+0xd6>
     96c:	2c 81       	ldd	r18, Y+4	; 0x04
     96e:	3d 81       	ldd	r19, Y+5	; 0x05
     970:	22 30       	cpi	r18, 0x02	; 2
     972:	31 05       	cpc	r19, r1
     974:	09 f4       	brne	.+2      	; 0x978 <EXTI_u8SetSenseControl+0x38>
     976:	99 c0       	rjmp	.+306    	; 0xaaa <EXTI_u8SetSenseControl+0x16a>
     978:	8c 81       	ldd	r24, Y+4	; 0x04
     97a:	9d 81       	ldd	r25, Y+5	; 0x05
     97c:	00 97       	sbiw	r24, 0x00	; 0
     97e:	09 f0       	breq	.+2      	; 0x982 <EXTI_u8SetSenseControl+0x42>
     980:	ac c0       	rjmp	.+344    	; 0xada <EXTI_u8SetSenseControl+0x19a>
	{

	/*Set INT0 required Sense control*/
	case EXTI_u8_INT0:
		if(EXTI_u8_LOW_LEVEL == Copy_u8Sense)
     982:	8b 81       	ldd	r24, Y+3	; 0x03
     984:	84 30       	cpi	r24, 0x04	; 4
     986:	79 f4       	brne	.+30     	; 0x9a6 <EXTI_u8SetSenseControl+0x66>
		{
			CLR_BIT(MCUCR,MCUCR_ISC00);
     988:	a5 e5       	ldi	r26, 0x55	; 85
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	e5 e5       	ldi	r30, 0x55	; 85
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	8e 7f       	andi	r24, 0xFE	; 254
     994:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
     996:	a5 e5       	ldi	r26, 0x55	; 85
     998:	b0 e0       	ldi	r27, 0x00	; 0
     99a:	e5 e5       	ldi	r30, 0x55	; 85
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	80 81       	ld	r24, Z
     9a0:	8d 7f       	andi	r24, 0xFD	; 253
     9a2:	8c 93       	st	X, r24
     9a4:	9b c0       	rjmp	.+310    	; 0xadc <EXTI_u8SetSenseControl+0x19c>
		}
		else if (EXTI_u8_ON_CHANGE == Copy_u8Sense)
     9a6:	8b 81       	ldd	r24, Y+3	; 0x03
     9a8:	83 30       	cpi	r24, 0x03	; 3
     9aa:	79 f4       	brne	.+30     	; 0x9ca <EXTI_u8SetSenseControl+0x8a>
		{
			SET_BIT(MCUCR,MCUCR_ISC00);
     9ac:	a5 e5       	ldi	r26, 0x55	; 85
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	e5 e5       	ldi	r30, 0x55	; 85
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	81 60       	ori	r24, 0x01	; 1
     9b8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
     9ba:	a5 e5       	ldi	r26, 0x55	; 85
     9bc:	b0 e0       	ldi	r27, 0x00	; 0
     9be:	e5 e5       	ldi	r30, 0x55	; 85
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	80 81       	ld	r24, Z
     9c4:	8d 7f       	andi	r24, 0xFD	; 253
     9c6:	8c 93       	st	X, r24
     9c8:	89 c0       	rjmp	.+274    	; 0xadc <EXTI_u8SetSenseControl+0x19c>
		}
		else if(EXTI_u8_FALLING_EDGE == Copy_u8Sense)
     9ca:	8b 81       	ldd	r24, Y+3	; 0x03
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	79 f4       	brne	.+30     	; 0x9ee <EXTI_u8SetSenseControl+0xae>
		{
			CLR_BIT(MCUCR,MCUCR_ISC00);
     9d0:	a5 e5       	ldi	r26, 0x55	; 85
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	e5 e5       	ldi	r30, 0x55	; 85
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	80 81       	ld	r24, Z
     9da:	8e 7f       	andi	r24, 0xFE	; 254
     9dc:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
     9de:	a5 e5       	ldi	r26, 0x55	; 85
     9e0:	b0 e0       	ldi	r27, 0x00	; 0
     9e2:	e5 e5       	ldi	r30, 0x55	; 85
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	80 81       	ld	r24, Z
     9e8:	82 60       	ori	r24, 0x02	; 2
     9ea:	8c 93       	st	X, r24
     9ec:	77 c0       	rjmp	.+238    	; 0xadc <EXTI_u8SetSenseControl+0x19c>
		}
		else if(EXTI_u8_RISING_EDGE == Copy_u8Sense)
     9ee:	8b 81       	ldd	r24, Y+3	; 0x03
     9f0:	81 30       	cpi	r24, 0x01	; 1
     9f2:	79 f4       	brne	.+30     	; 0xa12 <EXTI_u8SetSenseControl+0xd2>
		{
			SET_BIT(MCUCR,MCUCR_ISC00);
     9f4:	a5 e5       	ldi	r26, 0x55	; 85
     9f6:	b0 e0       	ldi	r27, 0x00	; 0
     9f8:	e5 e5       	ldi	r30, 0x55	; 85
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	80 81       	ld	r24, Z
     9fe:	81 60       	ori	r24, 0x01	; 1
     a00:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
     a02:	a5 e5       	ldi	r26, 0x55	; 85
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	e5 e5       	ldi	r30, 0x55	; 85
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	80 81       	ld	r24, Z
     a0c:	82 60       	ori	r24, 0x02	; 2
     a0e:	8c 93       	st	X, r24
     a10:	65 c0       	rjmp	.+202    	; 0xadc <EXTI_u8SetSenseControl+0x19c>
		}
		else
		{
			Local_u8ErrorSate = NOK;
     a12:	19 82       	std	Y+1, r1	; 0x01
     a14:	63 c0       	rjmp	.+198    	; 0xadc <EXTI_u8SetSenseControl+0x19c>
		}
		break;

		/*Set INT1 required Sense control*/
	case EXTI_u8_INT1:
		if(EXTI_u8_LOW_LEVEL == Copy_u8Sense)
     a16:	8b 81       	ldd	r24, Y+3	; 0x03
     a18:	84 30       	cpi	r24, 0x04	; 4
     a1a:	79 f4       	brne	.+30     	; 0xa3a <EXTI_u8SetSenseControl+0xfa>
		{
			CLR_BIT(MCUCR,MCUCR_ISC10);
     a1c:	a5 e5       	ldi	r26, 0x55	; 85
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	e5 e5       	ldi	r30, 0x55	; 85
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	8b 7f       	andi	r24, 0xFB	; 251
     a28:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
     a2a:	a5 e5       	ldi	r26, 0x55	; 85
     a2c:	b0 e0       	ldi	r27, 0x00	; 0
     a2e:	e5 e5       	ldi	r30, 0x55	; 85
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	80 81       	ld	r24, Z
     a34:	87 7f       	andi	r24, 0xF7	; 247
     a36:	8c 93       	st	X, r24
     a38:	51 c0       	rjmp	.+162    	; 0xadc <EXTI_u8SetSenseControl+0x19c>
		}
		else if (EXTI_u8_ON_CHANGE == Copy_u8Sense)
     a3a:	8b 81       	ldd	r24, Y+3	; 0x03
     a3c:	83 30       	cpi	r24, 0x03	; 3
     a3e:	79 f4       	brne	.+30     	; 0xa5e <EXTI_u8SetSenseControl+0x11e>
		{
			SET_BIT(MCUCR,MCUCR_ISC10);
     a40:	a5 e5       	ldi	r26, 0x55	; 85
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	e5 e5       	ldi	r30, 0x55	; 85
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	80 81       	ld	r24, Z
     a4a:	84 60       	ori	r24, 0x04	; 4
     a4c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
     a4e:	a5 e5       	ldi	r26, 0x55	; 85
     a50:	b0 e0       	ldi	r27, 0x00	; 0
     a52:	e5 e5       	ldi	r30, 0x55	; 85
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z
     a58:	87 7f       	andi	r24, 0xF7	; 247
     a5a:	8c 93       	st	X, r24
     a5c:	3f c0       	rjmp	.+126    	; 0xadc <EXTI_u8SetSenseControl+0x19c>
		}
		else if(EXTI_u8_FALLING_EDGE == Copy_u8Sense)
     a5e:	8b 81       	ldd	r24, Y+3	; 0x03
     a60:	82 30       	cpi	r24, 0x02	; 2
     a62:	79 f4       	brne	.+30     	; 0xa82 <EXTI_u8SetSenseControl+0x142>
		{
			CLR_BIT(MCUCR,MCUCR_ISC10);
     a64:	a5 e5       	ldi	r26, 0x55	; 85
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	e5 e5       	ldi	r30, 0x55	; 85
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	80 81       	ld	r24, Z
     a6e:	8b 7f       	andi	r24, 0xFB	; 251
     a70:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
     a72:	a5 e5       	ldi	r26, 0x55	; 85
     a74:	b0 e0       	ldi	r27, 0x00	; 0
     a76:	e5 e5       	ldi	r30, 0x55	; 85
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	80 81       	ld	r24, Z
     a7c:	88 60       	ori	r24, 0x08	; 8
     a7e:	8c 93       	st	X, r24
     a80:	2d c0       	rjmp	.+90     	; 0xadc <EXTI_u8SetSenseControl+0x19c>
		}
		else if(EXTI_u8_RISING_EDGE == Copy_u8Sense)
     a82:	8b 81       	ldd	r24, Y+3	; 0x03
     a84:	81 30       	cpi	r24, 0x01	; 1
     a86:	79 f4       	brne	.+30     	; 0xaa6 <EXTI_u8SetSenseControl+0x166>
		{
			SET_BIT(MCUCR,MCUCR_ISC10);
     a88:	a5 e5       	ldi	r26, 0x55	; 85
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	e5 e5       	ldi	r30, 0x55	; 85
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	84 60       	ori	r24, 0x04	; 4
     a94:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
     a96:	a5 e5       	ldi	r26, 0x55	; 85
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	e5 e5       	ldi	r30, 0x55	; 85
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	80 81       	ld	r24, Z
     aa0:	88 60       	ori	r24, 0x08	; 8
     aa2:	8c 93       	st	X, r24
     aa4:	1b c0       	rjmp	.+54     	; 0xadc <EXTI_u8SetSenseControl+0x19c>
		}
		else
		{
			Local_u8ErrorSate = NOK;
     aa6:	19 82       	std	Y+1, r1	; 0x01
     aa8:	19 c0       	rjmp	.+50     	; 0xadc <EXTI_u8SetSenseControl+0x19c>

		break;

		/*Set INT2 required Sense control*/
	case EXTI_u8_INT2:
		if(EXTI_u8_FALLING_EDGE == Copy_u8Sense)
     aaa:	8b 81       	ldd	r24, Y+3	; 0x03
     aac:	82 30       	cpi	r24, 0x02	; 2
     aae:	41 f4       	brne	.+16     	; 0xac0 <EXTI_u8SetSenseControl+0x180>
		{
			CLR_BIT(MCUCSR,MCUCSR_ISC2);
     ab0:	a4 e5       	ldi	r26, 0x54	; 84
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	e4 e5       	ldi	r30, 0x54	; 84
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	80 81       	ld	r24, Z
     aba:	8f 7b       	andi	r24, 0xBF	; 191
     abc:	8c 93       	st	X, r24
     abe:	0e c0       	rjmp	.+28     	; 0xadc <EXTI_u8SetSenseControl+0x19c>
		}
		else if(EXTI_u8_RISING_EDGE == Copy_u8Sense)
     ac0:	8b 81       	ldd	r24, Y+3	; 0x03
     ac2:	81 30       	cpi	r24, 0x01	; 1
     ac4:	41 f4       	brne	.+16     	; 0xad6 <EXTI_u8SetSenseControl+0x196>
		{
			SET_BIT(MCUCSR,MCUCSR_ISC2);
     ac6:	a4 e5       	ldi	r26, 0x54	; 84
     ac8:	b0 e0       	ldi	r27, 0x00	; 0
     aca:	e4 e5       	ldi	r30, 0x54	; 84
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	80 81       	ld	r24, Z
     ad0:	80 64       	ori	r24, 0x40	; 64
     ad2:	8c 93       	st	X, r24
     ad4:	03 c0       	rjmp	.+6      	; 0xadc <EXTI_u8SetSenseControl+0x19c>
		}
		else
		{
			Local_u8ErrorSate = NOK;
     ad6:	19 82       	std	Y+1, r1	; 0x01
     ad8:	01 c0       	rjmp	.+2      	; 0xadc <EXTI_u8SetSenseControl+0x19c>
		}

		break;
	default: Local_u8ErrorSate = NOK; break;
     ada:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorSate;
     adc:	89 81       	ldd	r24, Y+1	; 0x01
}
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	0f 90       	pop	r0
     ae8:	cf 91       	pop	r28
     aea:	df 91       	pop	r29
     aec:	08 95       	ret

00000aee <EXTI_u8EnableInt>:

u8 EXTI_u8EnableInt(u8 Copy_u8IntNum)
{
     aee:	df 93       	push	r29
     af0:	cf 93       	push	r28
     af2:	00 d0       	rcall	.+0      	; 0xaf4 <EXTI_u8EnableInt+0x6>
     af4:	00 d0       	rcall	.+0      	; 0xaf6 <EXTI_u8EnableInt+0x8>
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
     afa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorSate = OK;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8IntNum)
     b00:	8a 81       	ldd	r24, Y+2	; 0x02
     b02:	28 2f       	mov	r18, r24
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	3c 83       	std	Y+4, r19	; 0x04
     b08:	2b 83       	std	Y+3, r18	; 0x03
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	9c 81       	ldd	r25, Y+4	; 0x04
     b0e:	81 30       	cpi	r24, 0x01	; 1
     b10:	91 05       	cpc	r25, r1
     b12:	89 f0       	breq	.+34     	; 0xb36 <EXTI_u8EnableInt+0x48>
     b14:	2b 81       	ldd	r18, Y+3	; 0x03
     b16:	3c 81       	ldd	r19, Y+4	; 0x04
     b18:	22 30       	cpi	r18, 0x02	; 2
     b1a:	31 05       	cpc	r19, r1
     b1c:	a1 f0       	breq	.+40     	; 0xb46 <EXTI_u8EnableInt+0x58>
     b1e:	8b 81       	ldd	r24, Y+3	; 0x03
     b20:	9c 81       	ldd	r25, Y+4	; 0x04
     b22:	00 97       	sbiw	r24, 0x00	; 0
     b24:	c1 f4       	brne	.+48     	; 0xb56 <EXTI_u8EnableInt+0x68>
	{
	case EXTI_u8_INT0: SET_BIT(GICR,GICR_INT0); break;
     b26:	ab e5       	ldi	r26, 0x5B	; 91
     b28:	b0 e0       	ldi	r27, 0x00	; 0
     b2a:	eb e5       	ldi	r30, 0x5B	; 91
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	80 81       	ld	r24, Z
     b30:	80 64       	ori	r24, 0x40	; 64
     b32:	8c 93       	st	X, r24
     b34:	11 c0       	rjmp	.+34     	; 0xb58 <EXTI_u8EnableInt+0x6a>
	case EXTI_u8_INT1: SET_BIT(GICR,GICR_INT1); break;
     b36:	ab e5       	ldi	r26, 0x5B	; 91
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	eb e5       	ldi	r30, 0x5B	; 91
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	80 81       	ld	r24, Z
     b40:	80 68       	ori	r24, 0x80	; 128
     b42:	8c 93       	st	X, r24
     b44:	09 c0       	rjmp	.+18     	; 0xb58 <EXTI_u8EnableInt+0x6a>
	case EXTI_u8_INT2: SET_BIT(GICR,GICR_INT2); break;
     b46:	ab e5       	ldi	r26, 0x5B	; 91
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	eb e5       	ldi	r30, 0x5B	; 91
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	80 62       	ori	r24, 0x20	; 32
     b52:	8c 93       	st	X, r24
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <EXTI_u8EnableInt+0x6a>
	default: Local_u8ErrorSate = NOK; break;
     b56:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorSate;
     b58:	89 81       	ldd	r24, Y+1	; 0x01
}
     b5a:	0f 90       	pop	r0
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <EXTI_u8DisableInt>:
u8 EXTI_u8DisableInt(u8 Copy_u8IntNum)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	00 d0       	rcall	.+0      	; 0xb6e <EXTI_u8DisableInt+0x6>
     b6e:	00 d0       	rcall	.+0      	; 0xb70 <EXTI_u8DisableInt+0x8>
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
     b74:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorSate = OK;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8IntNum)
     b7a:	8a 81       	ldd	r24, Y+2	; 0x02
     b7c:	28 2f       	mov	r18, r24
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	3c 83       	std	Y+4, r19	; 0x04
     b82:	2b 83       	std	Y+3, r18	; 0x03
     b84:	8b 81       	ldd	r24, Y+3	; 0x03
     b86:	9c 81       	ldd	r25, Y+4	; 0x04
     b88:	81 30       	cpi	r24, 0x01	; 1
     b8a:	91 05       	cpc	r25, r1
     b8c:	89 f0       	breq	.+34     	; 0xbb0 <EXTI_u8DisableInt+0x48>
     b8e:	2b 81       	ldd	r18, Y+3	; 0x03
     b90:	3c 81       	ldd	r19, Y+4	; 0x04
     b92:	22 30       	cpi	r18, 0x02	; 2
     b94:	31 05       	cpc	r19, r1
     b96:	a1 f0       	breq	.+40     	; 0xbc0 <EXTI_u8DisableInt+0x58>
     b98:	8b 81       	ldd	r24, Y+3	; 0x03
     b9a:	9c 81       	ldd	r25, Y+4	; 0x04
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	c1 f4       	brne	.+48     	; 0xbd0 <EXTI_u8DisableInt+0x68>
	{
	case EXTI_u8_INT0: CLR_BIT(GICR,GICR_INT0); break;
     ba0:	ab e5       	ldi	r26, 0x5B	; 91
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	eb e5       	ldi	r30, 0x5B	; 91
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	8f 7b       	andi	r24, 0xBF	; 191
     bac:	8c 93       	st	X, r24
     bae:	11 c0       	rjmp	.+34     	; 0xbd2 <EXTI_u8DisableInt+0x6a>
	case EXTI_u8_INT1: CLR_BIT(GICR,GICR_INT1); break;
     bb0:	ab e5       	ldi	r26, 0x5B	; 91
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	eb e5       	ldi	r30, 0x5B	; 91
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8f 77       	andi	r24, 0x7F	; 127
     bbc:	8c 93       	st	X, r24
     bbe:	09 c0       	rjmp	.+18     	; 0xbd2 <EXTI_u8DisableInt+0x6a>
	case EXTI_u8_INT2: CLR_BIT(GICR,GICR_INT2); break;
     bc0:	ab e5       	ldi	r26, 0x5B	; 91
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	eb e5       	ldi	r30, 0x5B	; 91
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	8f 7d       	andi	r24, 0xDF	; 223
     bcc:	8c 93       	st	X, r24
     bce:	01 c0       	rjmp	.+2      	; 0xbd2 <EXTI_u8DisableInt+0x6a>
	default: Local_u8ErrorSate = NOK; break;
     bd0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorSate;
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
}
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	cf 91       	pop	r28
     bde:	df 91       	pop	r29
     be0:	08 95       	ret

00000be2 <EXTI_u8SetCallBack>:

/*************************************CallBack Function************************************************/
u8 EXTI_u8SetCallBack(void (*Copy_pvCallBack)(void),u8 Copy_u8IntNum)
{
     be2:	df 93       	push	r29
     be4:	cf 93       	push	r28
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <EXTI_u8SetCallBack+0x6>
     be8:	00 d0       	rcall	.+0      	; 0xbea <EXTI_u8SetCallBack+0x8>
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
     bee:	9b 83       	std	Y+3, r25	; 0x03
     bf0:	8a 83       	std	Y+2, r24	; 0x02
     bf2:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState =OK;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pvCallBack !=NULL)
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	9b 81       	ldd	r25, Y+3	; 0x03
     bfc:	00 97       	sbiw	r24, 0x00	; 0
     bfe:	69 f0       	breq	.+26     	; 0xc1a <EXTI_u8SetCallBack+0x38>
	{
		EXTI_pvCallBackFunc[Copy_u8IntNum] =Copy_pvCallBack;
     c00:	8c 81       	ldd	r24, Y+4	; 0x04
     c02:	88 2f       	mov	r24, r24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	fc 01       	movw	r30, r24
     c0c:	e0 5a       	subi	r30, 0xA0	; 160
     c0e:	ff 4f       	sbci	r31, 0xFF	; 255
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	9b 81       	ldd	r25, Y+3	; 0x03
     c14:	91 83       	std	Z+1, r25	; 0x01
     c16:	80 83       	st	Z, r24
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <EXTI_u8SetCallBack+0x3c>
	}
	else
	{
		Local_u8ErrorState =NULL_POINTER;
     c1a:	82 e0       	ldi	r24, 0x02	; 2
     c1c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
}
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	cf 91       	pop	r28
     c2a:	df 91       	pop	r29
     c2c:	08 95       	ret

00000c2e <__vector_1>:
/*************************************************INT0*****************************************/
void __vector_1 (void) 		__attribute__((signal));
void __vector_1 (void)
{
     c2e:	1f 92       	push	r1
     c30:	0f 92       	push	r0
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	0f 92       	push	r0
     c36:	11 24       	eor	r1, r1
     c38:	2f 93       	push	r18
     c3a:	3f 93       	push	r19
     c3c:	4f 93       	push	r20
     c3e:	5f 93       	push	r21
     c40:	6f 93       	push	r22
     c42:	7f 93       	push	r23
     c44:	8f 93       	push	r24
     c46:	9f 93       	push	r25
     c48:	af 93       	push	r26
     c4a:	bf 93       	push	r27
     c4c:	ef 93       	push	r30
     c4e:	ff 93       	push	r31
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvCallBackFunc[EXTI_u8_INT0] != NULL)
     c58:	80 91 60 00 	lds	r24, 0x0060
     c5c:	90 91 61 00 	lds	r25, 0x0061
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	29 f0       	breq	.+10     	; 0xc6e <__vector_1+0x40>
	{
		/*Invoke the call back function*/
		EXTI_pvCallBackFunc[EXTI_u8_INT0]();
     c64:	e0 91 60 00 	lds	r30, 0x0060
     c68:	f0 91 61 00 	lds	r31, 0x0061
     c6c:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
     c6e:	cf 91       	pop	r28
     c70:	df 91       	pop	r29
     c72:	ff 91       	pop	r31
     c74:	ef 91       	pop	r30
     c76:	bf 91       	pop	r27
     c78:	af 91       	pop	r26
     c7a:	9f 91       	pop	r25
     c7c:	8f 91       	pop	r24
     c7e:	7f 91       	pop	r23
     c80:	6f 91       	pop	r22
     c82:	5f 91       	pop	r21
     c84:	4f 91       	pop	r20
     c86:	3f 91       	pop	r19
     c88:	2f 91       	pop	r18
     c8a:	0f 90       	pop	r0
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	0f 90       	pop	r0
     c90:	1f 90       	pop	r1
     c92:	18 95       	reti

00000c94 <__vector_2>:
/*************************************************INT1*****************************************/
void __vector_2 (void) 		__attribute__((signal));
void __vector_2 (void)
{
     c94:	1f 92       	push	r1
     c96:	0f 92       	push	r0
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	0f 92       	push	r0
     c9c:	11 24       	eor	r1, r1
     c9e:	2f 93       	push	r18
     ca0:	3f 93       	push	r19
     ca2:	4f 93       	push	r20
     ca4:	5f 93       	push	r21
     ca6:	6f 93       	push	r22
     ca8:	7f 93       	push	r23
     caa:	8f 93       	push	r24
     cac:	9f 93       	push	r25
     cae:	af 93       	push	r26
     cb0:	bf 93       	push	r27
     cb2:	ef 93       	push	r30
     cb4:	ff 93       	push	r31
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvCallBackFunc[EXTI_u8_INT1] != NULL)
     cbe:	80 91 62 00 	lds	r24, 0x0062
     cc2:	90 91 63 00 	lds	r25, 0x0063
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	29 f0       	breq	.+10     	; 0xcd4 <__vector_2+0x40>
	{
		/*Invoke the call back function*/
		EXTI_pvCallBackFunc[EXTI_u8_INT1]();
     cca:	e0 91 62 00 	lds	r30, 0x0062
     cce:	f0 91 63 00 	lds	r31, 0x0063
     cd2:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	ff 91       	pop	r31
     cda:	ef 91       	pop	r30
     cdc:	bf 91       	pop	r27
     cde:	af 91       	pop	r26
     ce0:	9f 91       	pop	r25
     ce2:	8f 91       	pop	r24
     ce4:	7f 91       	pop	r23
     ce6:	6f 91       	pop	r22
     ce8:	5f 91       	pop	r21
     cea:	4f 91       	pop	r20
     cec:	3f 91       	pop	r19
     cee:	2f 91       	pop	r18
     cf0:	0f 90       	pop	r0
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	0f 90       	pop	r0
     cf6:	1f 90       	pop	r1
     cf8:	18 95       	reti

00000cfa <__vector_3>:
/*************************************************INT2*****************************************/
void __vector_3 (void) 		__attribute__((signal));
void __vector_3 (void)
{
     cfa:	1f 92       	push	r1
     cfc:	0f 92       	push	r0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	0f 92       	push	r0
     d02:	11 24       	eor	r1, r1
     d04:	2f 93       	push	r18
     d06:	3f 93       	push	r19
     d08:	4f 93       	push	r20
     d0a:	5f 93       	push	r21
     d0c:	6f 93       	push	r22
     d0e:	7f 93       	push	r23
     d10:	8f 93       	push	r24
     d12:	9f 93       	push	r25
     d14:	af 93       	push	r26
     d16:	bf 93       	push	r27
     d18:	ef 93       	push	r30
     d1a:	ff 93       	push	r31
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvCallBackFunc[EXTI_u8_INT2] != NULL)
     d24:	80 91 64 00 	lds	r24, 0x0064
     d28:	90 91 65 00 	lds	r25, 0x0065
     d2c:	00 97       	sbiw	r24, 0x00	; 0
     d2e:	29 f0       	breq	.+10     	; 0xd3a <__vector_3+0x40>
	{
		/*Invoke the call back function*/
		EXTI_pvCallBackFunc[EXTI_u8_INT2]();
     d30:	e0 91 64 00 	lds	r30, 0x0064
     d34:	f0 91 65 00 	lds	r31, 0x0065
     d38:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	ff 91       	pop	r31
     d40:	ef 91       	pop	r30
     d42:	bf 91       	pop	r27
     d44:	af 91       	pop	r26
     d46:	9f 91       	pop	r25
     d48:	8f 91       	pop	r24
     d4a:	7f 91       	pop	r23
     d4c:	6f 91       	pop	r22
     d4e:	5f 91       	pop	r21
     d50:	4f 91       	pop	r20
     d52:	3f 91       	pop	r19
     d54:	2f 91       	pop	r18
     d56:	0f 90       	pop	r0
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	0f 90       	pop	r0
     d5c:	1f 90       	pop	r1
     d5e:	18 95       	reti

00000d60 <GIE_voidEnableGlobal>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnableGlobal(void)
{
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
	/*1- By C language*/
	SET_BIT(SREG,SREG_I);			
     d68:	af e5       	ldi	r26, 0x5F	; 95
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	ef e5       	ldi	r30, 0x5F	; 95
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	80 68       	ori	r24, 0x80	; 128
     d74:	8c 93       	st	X, r24
	
	/*2- By assembly*/
	/*  __asm volatile("SEI");  */
}
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <GIE_voidDisableGlobal>:

void GIE_voidDisableGlobal(void)
{
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
	/*1- By C language*/
	CLR_BIT(SREG,SREG_I);
     d84:	af e5       	ldi	r26, 0x5F	; 95
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	ef e5       	ldi	r30, 0x5F	; 95
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	8f 77       	andi	r24, 0x7F	; 127
     d90:	8c 93       	st	X, r24
	
	/*2- By assembly*/
	/*  __asm volatile("CLI");  */
}
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
     da0:	ea e3       	ldi	r30, 0x3A	; 58
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	10 82       	st	Z, r1
	DDRB = PORTB_DIR;
     da6:	e7 e3       	ldi	r30, 0x37	; 55
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 eb       	ldi	r24, 0xB0	; 176
     dac:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
     dae:	e4 e3       	ldi	r30, 0x34	; 52
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
     db4:	e1 e3       	ldi	r30, 0x31	; 49
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	10 82       	st	Z, r1

	PORTA = PORTA_INITIAL_VALUE;
     dba:	eb e3       	ldi	r30, 0x3B	; 59
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
     dc0:	e8 e3       	ldi	r30, 0x38	; 56
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
     dc6:	e5 e3       	ldi	r30, 0x35	; 53
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
     dcc:	e2 e3       	ldi	r30, 0x32	; 50
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	10 82       	st	Z, r1
}
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	08 95       	ret

00000dd8 <SPI_voidInitialize>:
#include "SPI_private.h"
#include "SPI_interface.h"


void SPI_voidInitialize(u8 Copy_u8Role)
{
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	0f 92       	push	r0
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
     de2:	89 83       	std	Y+1, r24	; 0x01
#if SPI_u8_DATA_ORDER == SPI_u8_MSB_FIRST
	CLR_BIT(SPCR,SPCR_DORD);
     de4:	ad e2       	ldi	r26, 0x2D	; 45
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	ed e2       	ldi	r30, 0x2D	; 45
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8f 7d       	andi	r24, 0xDF	; 223
     df0:	8c 93       	st	X, r24
#elif SPI_u8_DATA_ORDER == SPI_u8_LSB_FIRST
	SETBIT(SPCR,SPCR_DORD);
#endif

if (Copy_u8Role == SPI_u8_MASTER)
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	41 f4       	brne	.+16     	; 0xe08 <SPI_voidInitialize+0x30>
{
	SET_BIT(SPCR,SPCR_MSTR);
     df8:	ad e2       	ldi	r26, 0x2D	; 45
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	ed e2       	ldi	r30, 0x2D	; 45
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	80 61       	ori	r24, 0x10	; 16
     e04:	8c 93       	st	X, r24
     e06:	0a c0       	rjmp	.+20     	; 0xe1c <SPI_voidInitialize+0x44>
}
else if( Copy_u8Role == SPI_u8_SLAVE)
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	82 30       	cpi	r24, 0x02	; 2
     e0c:	39 f4       	brne	.+14     	; 0xe1c <SPI_voidInitialize+0x44>
{
	CLR_BIT(SPCR,SPCR_MSTR);
     e0e:	ad e2       	ldi	r26, 0x2D	; 45
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	ed e2       	ldi	r30, 0x2D	; 45
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	8f 7e       	andi	r24, 0xEF	; 239
     e1a:	8c 93       	st	X, r24
}

#if SPI_u8_CLOCK_POLARITY == SPI_u8_LEADING_RISING
	CLR_BIT(SPCR,SPCR_CPOL);
     e1c:	ad e2       	ldi	r26, 0x2D	; 45
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	ed e2       	ldi	r30, 0x2D	; 45
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	87 7f       	andi	r24, 0xF7	; 247
     e28:	8c 93       	st	X, r24
#elif SPI_u8_CLOCK_POLARITY == SPI_u8_LEADING_FALLING
	SET_BIT(SPCR,SPCR_CPOL);
#endif

#if SPI_u8_CLOCK_PHASE == SPI_u8_LEADING_SAMPLE
	CLR_BIT(SPCR,SPCR_CPHA);
     e2a:	ad e2       	ldi	r26, 0x2D	; 45
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	ed e2       	ldi	r30, 0x2D	; 45
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8b 7f       	andi	r24, 0xFB	; 251
     e36:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_CPHA);
#endif


	 /* Enable SPI Pripheral*/
	SET_BIT(SPCR,SPCR_SPE);
     e38:	ad e2       	ldi	r26, 0x2D	; 45
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	ed e2       	ldi	r30, 0x2D	; 45
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	80 64       	ori	r24, 0x40	; 64
     e44:	8c 93       	st	X, r24
}
     e46:	0f 90       	pop	r0
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <SPI_u8Transiver>:

u8 SPI_u8Transiver(u8 Copy_u8Data)
{
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	0f 92       	push	r0
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	89 83       	std	Y+1, r24	; 0x01
	SPDR=Copy_u8Data;
     e5a:	ef e2       	ldi	r30, 0x2F	; 47
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	80 83       	st	Z, r24
	while((GET_BIT(SPSR,SPSR_SPIF)==0));
     e62:	ee e2       	ldi	r30, 0x2E	; 46
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	88 23       	and	r24, r24
     e6a:	dc f7       	brge	.-10     	; 0xe62 <SPI_u8Transiver+0x14>
	return SPDR;
     e6c:	ef e2       	ldi	r30, 0x2F	; 47
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
}
     e72:	0f 90       	pop	r0
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <Timer0_voidInit>:
u32 volatile ThirdTime=0;

u8 volatile Flag=0; //to indicate how many times we entered external interrupt

void Timer0_voidInit(void)
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
	/*normal mode setting*/
	CLR_BIT(TCCR0, TCCR0_WGM00);
     e82:	a3 e5       	ldi	r26, 0x53	; 83
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e3 e5       	ldi	r30, 0x53	; 83
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8f 7b       	andi	r24, 0xBF	; 191
     e8e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, TCCR0_WGM01);
     e90:	a3 e5       	ldi	r26, 0x53	; 83
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e3 e5       	ldi	r30, 0x53	; 83
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	87 7f       	andi	r24, 0xF7	; 247
     e9c:	8c 93       	st	X, r24

	/*<pre>-load setting*/
	TCNT0= TIMER0_u8_PRELOAD;
     e9e:	e2 e5       	ldi	r30, 0x52	; 82
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 ec       	ldi	r24, 0xC0	; 192
     ea4:	80 83       	st	Z, r24

	/*overflow interrupt enable*/
	SET_BIT(TIMSK, TIMSK_TOIE0);
     ea6:	a9 e5       	ldi	r26, 0x59	; 89
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e9 e5       	ldi	r30, 0x59	; 89
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	81 60       	ori	r24, 0x01	; 1
     eb2:	8c 93       	st	X, r24

	/*<pre>-scaler division*/
	TCCR0 &= PRESCALER_MASK;
     eb4:	a3 e5       	ldi	r26, 0x53	; 83
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e3 e5       	ldi	r30, 0x53	; 83
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	88 7f       	andi	r24, 0xF8	; 248
     ec0:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_u8_PRESCALER;
     ec2:	a3 e5       	ldi	r26, 0x53	; 83
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e3 e5       	ldi	r30, 0x53	; 83
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	82 60       	ori	r24, 0x02	; 2
     ece:	8c 93       	st	X, r24
}
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <Timer0_voidSetPreloadValue>:

void Timer0_voidSetPreloadValue(u8 Copy_u8PreloadValue)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	0f 92       	push	r0
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	89 83       	std	Y+1, r24	; 0x01
	TCCR0= Copy_u8PreloadValue;
     ee2:	e3 e5       	ldi	r30, 0x53	; 83
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	80 83       	st	Z, r24
}
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <Timer0_u8ovSetCallback>:

u8 Timer0_u8ovSetCallback(void (*Copy_pvCallBackFunc)(void))
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <Timer0_u8ovSetCallback+0x6>
     ef8:	0f 92       	push	r0
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	9b 83       	std	Y+3, r25	; 0x03
     f00:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState =OK;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackFunc !=NULL)
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	9b 81       	ldd	r25, Y+3	; 0x03
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	39 f0       	breq	.+14     	; 0xf1c <Timer0_u8ovSetCallback+0x2a>
	{
		TIMER_pvCallBackFunc=Copy_pvCallBackFunc;
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	9b 81       	ldd	r25, Y+3	; 0x03
     f12:	90 93 67 00 	sts	0x0067, r25
     f16:	80 93 66 00 	sts	0x0066, r24
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <Timer0_u8ovSetCallback+0x2e>
	}
	else
	{
		Local_u8ErrorState =NULL_POINTER;
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     f20:	89 81       	ldd	r24, Y+1	; 0x01
}
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <__vector_11>:

void __vector_11 (void)  __attribute__((signal));
void __vector_11 (void)
{
     f2e:	1f 92       	push	r1
     f30:	0f 92       	push	r0
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	0f 92       	push	r0
     f36:	11 24       	eor	r1, r1
     f38:	2f 93       	push	r18
     f3a:	3f 93       	push	r19
     f3c:	4f 93       	push	r20
     f3e:	5f 93       	push	r21
     f40:	6f 93       	push	r22
     f42:	7f 93       	push	r23
     f44:	8f 93       	push	r24
     f46:	9f 93       	push	r25
     f48:	af 93       	push	r26
     f4a:	bf 93       	push	r27
     f4c:	ef 93       	push	r30
     f4e:	ff 93       	push	r31
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_pvCallBackFunc != NULL)
     f58:	80 91 66 00 	lds	r24, 0x0066
     f5c:	90 91 67 00 	lds	r25, 0x0067
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	29 f0       	breq	.+10     	; 0xf6e <__vector_11+0x40>
	{
		TIMER_pvCallBackFunc();
     f64:	e0 91 66 00 	lds	r30, 0x0066
     f68:	f0 91 67 00 	lds	r31, 0x0067
     f6c:	09 95       	icall
	}
	else
	{
		//Do Nothing
	}
}
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	ff 91       	pop	r31
     f74:	ef 91       	pop	r30
     f76:	bf 91       	pop	r27
     f78:	af 91       	pop	r26
     f7a:	9f 91       	pop	r25
     f7c:	8f 91       	pop	r24
     f7e:	7f 91       	pop	r23
     f80:	6f 91       	pop	r22
     f82:	5f 91       	pop	r21
     f84:	4f 91       	pop	r20
     f86:	3f 91       	pop	r19
     f88:	2f 91       	pop	r18
     f8a:	0f 90       	pop	r0
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	0f 90       	pop	r0
     f90:	1f 90       	pop	r1
     f92:	18 95       	reti

00000f94 <Timer1_voidInit>:

void Timer1_voidInit(void)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62

	/*Clear OC1A/OC1B on compare match, set
	OC1A/OC1B at TOP*/
	CLR_BIT(TCCR1A, TCCR1A_COM1A0);
     f9c:	af e4       	ldi	r26, 0x4F	; 79
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	ef e4       	ldi	r30, 0x4F	; 79
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	8f 7b       	andi	r24, 0xBF	; 191
     fa8:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, TCCR1A_COM1A1);
     faa:	af e4       	ldi	r26, 0x4F	; 79
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	ef e4       	ldi	r30, 0x4F	; 79
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	80 68       	ori	r24, 0x80	; 128
     fb6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, TCCR1B_WGM12);
     fb8:	ae e4       	ldi	r26, 0x4E	; 78
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	ee e4       	ldi	r30, 0x4E	; 78
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	88 60       	ori	r24, 0x08	; 8
     fc4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, TCCR1B_WGM13);
     fc6:	ae e4       	ldi	r26, 0x4E	; 78
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	ee e4       	ldi	r30, 0x4E	; 78
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	80 61       	ori	r24, 0x10	; 16
     fd2:	8c 93       	st	X, r24

	/*Fast PWM*/
	CLR_BIT(TCCR1A, TCCR1A_WGM10);
     fd4:	af e4       	ldi	r26, 0x4F	; 79
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	ef e4       	ldi	r30, 0x4F	; 79
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8e 7f       	andi	r24, 0xFE	; 254
     fe0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, TCCR1A_WGM11);
     fe2:	af e4       	ldi	r26, 0x4F	; 79
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	ef e4       	ldi	r30, 0x4F	; 79
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	82 60       	ori	r24, 0x02	; 2
     fee:	8c 93       	st	X, r24
	/*<pre>-scaler  CLk/8*/
	/*CLR_BIT(TCCR1B, TCCR1B_CS10);
	SET_BIT(TCCR1B, TCCR1B_CS11);
	CLR_BIT(TCCR1B, TCCR1B_CS12);*/

	TCCR1B &= PRESCALER_MASK;
     ff0:	ae e4       	ldi	r26, 0x4E	; 78
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ee e4       	ldi	r30, 0x4E	; 78
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	88 7f       	andi	r24, 0xF8	; 248
     ffc:	8c 93       	st	X, r24
	TCCR1B |= TIMER0_u8_PRESCALER;
     ffe:	ae e4       	ldi	r26, 0x4E	; 78
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	ee e4       	ldi	r30, 0x4E	; 78
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	82 60       	ori	r24, 0x02	; 2
    100a:	8c 93       	st	X, r24

	/*Set top value*/
	ICR1=65000;
    100c:	e6 e4       	ldi	r30, 0x46	; 70
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	88 ee       	ldi	r24, 0xE8	; 232
    1012:	9d ef       	ldi	r25, 0xFD	; 253
    1014:	91 83       	std	Z+1, r25	; 0x01
    1016:	80 83       	st	Z, r24
}
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <Timer1_voidInitNormalMode>:

void Timer1_voidInitNormalMode(void)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62

	/*Normal Mode*/
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1026:	af e4       	ldi	r26, 0x4F	; 79
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	ef e4       	ldi	r30, 0x4F	; 79
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	8e 7f       	andi	r24, 0xFE	; 254
    1032:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1034:	af e4       	ldi	r26, 0x4F	; 79
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	ef e4       	ldi	r30, 0x4F	; 79
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	8d 7f       	andi	r24, 0xFD	; 253
    1040:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1042:	ae e4       	ldi	r26, 0x4E	; 78
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	ee e4       	ldi	r30, 0x4E	; 78
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	87 7f       	andi	r24, 0xF7	; 247
    104e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1050:	ae e4       	ldi	r26, 0x4E	; 78
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	ee e4       	ldi	r30, 0x4E	; 78
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8f 7e       	andi	r24, 0xEF	; 239
    105c:	8c 93       	st	X, r24
	/*<pre>-scaler  CLk/8*/
	/*CLR_BIT(TCCR1B, TCCR1B_CS10);
	SET_BIT(TCCR1B, TCCR1B_CS11);
	CLR_BIT(TCCR1B, TCCR1B_CS12);*/

	TCCR1B &= PRESCALER_MASK;
    105e:	ae e4       	ldi	r26, 0x4E	; 78
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	ee e4       	ldi	r30, 0x4E	; 78
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	88 7f       	andi	r24, 0xF8	; 248
    106a:	8c 93       	st	X, r24
	TCCR1B |= TIMER0_u8_PRESCALER;
    106c:	ae e4       	ldi	r26, 0x4E	; 78
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	ee e4       	ldi	r30, 0x4E	; 78
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	82 60       	ori	r24, 0x02	; 2
    1078:	8c 93       	st	X, r24
}
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <Timer1_voidSetCompareValue>:

void Timer1_voidSetCompareValue(u16 Copy_u8CompareValue)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	00 d0       	rcall	.+0      	; 0x1086 <Timer1_voidSetCompareValue+0x6>
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	9a 83       	std	Y+2, r25	; 0x02
    108c:	89 83       	std	Y+1, r24	; 0x01
	OCR1A= Copy_u8CompareValue;
    108e:	ea e4       	ldi	r30, 0x4A	; 74
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
    1096:	91 83       	std	Z+1, r25	; 0x01
    1098:	80 83       	st	Z, r24
}
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <__vector_9>:
/**********************************************************/

/*timer1 overflow*/
void __vector_9 (void)  __attribute__((signal));
void __vector_9 (void)
{
    10a4:	1f 92       	push	r1
    10a6:	0f 92       	push	r0
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	0f 92       	push	r0
    10ac:	11 24       	eor	r1, r1
    10ae:	8f 93       	push	r24
    10b0:	9f 93       	push	r25
    10b2:	af 93       	push	r26
    10b4:	bf 93       	push	r27
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
	/*determine how many time the ICR1 overflow*/
	Counter ++;
    10be:	80 91 68 00 	lds	r24, 0x0068
    10c2:	90 91 69 00 	lds	r25, 0x0069
    10c6:	a0 91 6a 00 	lds	r26, 0x006A
    10ca:	b0 91 6b 00 	lds	r27, 0x006B
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	a1 1d       	adc	r26, r1
    10d2:	b1 1d       	adc	r27, r1
    10d4:	80 93 68 00 	sts	0x0068, r24
    10d8:	90 93 69 00 	sts	0x0069, r25
    10dc:	a0 93 6a 00 	sts	0x006A, r26
    10e0:	b0 93 6b 00 	sts	0x006B, r27
}
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	bf 91       	pop	r27
    10ea:	af 91       	pop	r26
    10ec:	9f 91       	pop	r25
    10ee:	8f 91       	pop	r24
    10f0:	0f 90       	pop	r0
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	0f 90       	pop	r0
    10f6:	1f 90       	pop	r1
    10f8:	18 95       	reti

000010fa <USART_voidInit>:
#include "UART_register.h"
#include "UART_config.h"
#include"UART_interface.h"

void USART_voidInit (void)
{
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
	/*select 8-bit data*/
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
    1102:	aa e2       	ldi	r26, 0x2A	; 42
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	ea e2       	ldi	r30, 0x2A	; 42
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	8b 7f       	andi	r24, 0xFB	; 251
    110e:	8c 93       	st	X, r24

	UCSRC =0b10000110;
    1110:	e0 e4       	ldi	r30, 0x40	; 64
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	86 e8       	ldi	r24, 0x86	; 134
    1116:	80 83       	st	Z, r24


	/* 9600 bps*/
	UBRRL =51;
    1118:	e9 e2       	ldi	r30, 0x29	; 41
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	83 e3       	ldi	r24, 0x33	; 51
    111e:	80 83       	st	Z, r24


	/*receiver enable*/
	SET_BIT(UCSRB,UCSRB_RXEN);
    1120:	aa e2       	ldi	r26, 0x2A	; 42
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	ea e2       	ldi	r30, 0x2A	; 42
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	80 61       	ori	r24, 0x10	; 16
    112c:	8c 93       	st	X, r24

	/*transmit enable*/
	SET_BIT(UCSRB,UCSRB_TXEN);
    112e:	aa e2       	ldi	r26, 0x2A	; 42
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	ea e2       	ldi	r30, 0x2A	; 42
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	88 60       	ori	r24, 0x08	; 8
    113a:	8c 93       	st	X, r24
}
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <UART_SendString>:

void UART_SendString(char *str)
{
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	00 d0       	rcall	.+0      	; 0x1148 <UART_SendString+0x6>
    1148:	0f 92       	push	r0
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	9b 83       	std	Y+3, r25	; 0x03
    1150:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char j=0;
    1152:	19 82       	std	Y+1, r1	; 0x01
    1154:	0e c0       	rjmp	.+28     	; 0x1172 <UART_SendString+0x30>

	while (str[j]!=0)		/* Send string till null */
	{
		USART_voidSendData(str[j]);
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	9b 81       	ldd	r25, Y+3	; 0x03
    1160:	fc 01       	movw	r30, r24
    1162:	e2 0f       	add	r30, r18
    1164:	f3 1f       	adc	r31, r19
    1166:	80 81       	ld	r24, Z
    1168:	0e 94 ca 08 	call	0x1194	; 0x1194 <USART_voidSendData>
		j++;
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	8f 5f       	subi	r24, 0xFF	; 255
    1170:	89 83       	std	Y+1, r24	; 0x01

void UART_SendString(char *str)
{
	unsigned char j=0;

	while (str[j]!=0)		/* Send string till null */
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	9b 81       	ldd	r25, Y+3	; 0x03
    117c:	fc 01       	movw	r30, r24
    117e:	e2 0f       	add	r30, r18
    1180:	f3 1f       	adc	r31, r19
    1182:	80 81       	ld	r24, Z
    1184:	88 23       	and	r24, r24
    1186:	39 f7       	brne	.-50     	; 0x1156 <UART_SendString+0x14>
	{
		USART_voidSendData(str[j]);
		j++;
	}
}
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <USART_voidSendData>:

void USART_voidSendData(u8 Copy_u8Data)
{
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	0f 92       	push	r0
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	89 83       	std	Y+1, r24	; 0x01
	/*1-Wait until data register is empty*/
	while (GET_BIT(UCSRA, UCSRA_UDRE) == 0);
    11a0:	eb e2       	ldi	r30, 0x2B	; 43
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	82 95       	swap	r24
    11a8:	86 95       	lsr	r24
    11aa:	87 70       	andi	r24, 0x07	; 7
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	81 70       	andi	r24, 0x01	; 1
    11b2:	90 70       	andi	r25, 0x00	; 0
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	a1 f3       	breq	.-24     	; 0x11a0 <USART_voidSendData+0xc>

	/*2- Write the data to the UDR register*/
	UDR = Copy_u8Data;
    11b8:	ec e2       	ldi	r30, 0x2C	; 44
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	80 83       	st	Z, r24
}
    11c0:	0f 90       	pop	r0
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <USART_voidReceiveData>:

u8 USART_voidReceiveData(void)
{
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
	/*1-Wait until new Data is received*/
	while (GET_BIT(UCSRA, UCSRA_RXC) == 0);
    11d0:	eb e2       	ldi	r30, 0x2B	; 43
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	88 23       	and	r24, r24
    11d8:	dc f7       	brge	.-10     	; 0x11d0 <USART_voidReceiveData+0x8>

	/*2- Return the Received data*/
	return UDR;
    11da:	ec e2       	ldi	r30, 0x2C	; 44
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
}
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <main>:
 *******************************************************************************/
#include "CommunicationLinker.h"
#include "BluetoothModule.h"
#include "STD_TYPES.h"

int main() {
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	0f 92       	push	r0
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Local variable to store the upcoming data
	 */
	u8 data = 0;
    11f0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Init Port Module
	 */
	PORT_voidInit();
    11f2:	0e 94 cc 06 	call	0xd98	; 0xd98 <PORT_voidInit>

	/*
	 * Init the bluetooth module
	 */
	BluetoothModule_Init();
    11f6:	0e 94 3e 00 	call	0x7c	; 0x7c <BluetoothModule_Init>

	/*
	 * Init the CommunicationLinker Module as Master MC
	 */
	Comm_Init(COMM_MASTER_MODE);
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	0e 94 5d 00 	call	0xba	; 0xba <Comm_Init>
	while (1) {

		/*
		 * Recieve the data from the bluetooth module via USART
		 */
		data = BluetoothModule_RecieveData();
    1200:	0e 94 54 00 	call	0xa8	; 0xa8 <BluetoothModule_RecieveData>
    1204:	89 83       	std	Y+1, r24	; 0x01
		/*
		 * Send the data to the sink MC via InterCommunication Link
		 */
		data = Comm_SendData(data);
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	0e 94 78 00 	call	0xf0	; 0xf0 <Comm_SendData>
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	f8 cf       	rjmp	.-16     	; 0x1200 <main+0x1a>

00001210 <_exit>:
    1210:	f8 94       	cli

00001212 <__stop_program>:
    1212:	ff cf       	rjmp	.-2      	; 0x1212 <__stop_program>
